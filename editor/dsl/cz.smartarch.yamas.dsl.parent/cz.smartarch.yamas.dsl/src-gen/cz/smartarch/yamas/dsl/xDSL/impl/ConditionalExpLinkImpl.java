/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.xDSL.impl;

import cz.smartarch.yamas.dsl.xDSL.ConditionalExpLink;
import cz.smartarch.yamas.dsl.xDSL.ExperimentNode;
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Exp Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.ConditionalExpLinkImpl#getFromNode <em>From Node</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.ConditionalExpLinkImpl#getToNode <em>To Node</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.ConditionalExpLinkImpl#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalExpLinkImpl extends ExperimentFlowImpl implements ConditionalExpLink
{
  /**
   * The cached value of the '{@link #getFromNode() <em>From Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromNode()
   * @generated
   * @ordered
   */
  protected ExperimentNode fromNode;

  /**
   * The cached value of the '{@link #getToNode() <em>To Node</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToNode()
   * @generated
   * @ordered
   */
  protected ExperimentNode toNode;

  /**
   * The default value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected static final String CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected String condition = CONDITION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalExpLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.CONDITIONAL_EXP_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentNode getFromNode()
  {
    if (fromNode != null && fromNode.eIsProxy())
    {
      InternalEObject oldFromNode = (InternalEObject)fromNode;
      fromNode = (ExperimentNode)eResolveProxy(oldFromNode);
      if (fromNode != oldFromNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.CONDITIONAL_EXP_LINK__FROM_NODE, oldFromNode, fromNode));
      }
    }
    return fromNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExperimentNode basicGetFromNode()
  {
    return fromNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFromNode(ExperimentNode newFromNode)
  {
    ExperimentNode oldFromNode = fromNode;
    fromNode = newFromNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.CONDITIONAL_EXP_LINK__FROM_NODE, oldFromNode, fromNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentNode getToNode()
  {
    if (toNode != null && toNode.eIsProxy())
    {
      InternalEObject oldToNode = (InternalEObject)toNode;
      toNode = (ExperimentNode)eResolveProxy(oldToNode);
      if (toNode != oldToNode)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.CONDITIONAL_EXP_LINK__TO_NODE, oldToNode, toNode));
      }
    }
    return toNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExperimentNode basicGetToNode()
  {
    return toNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setToNode(ExperimentNode newToNode)
  {
    ExperimentNode oldToNode = toNode;
    toNode = newToNode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.CONDITIONAL_EXP_LINK__TO_NODE, oldToNode, toNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(String newCondition)
  {
    String oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.CONDITIONAL_EXP_LINK__CONDITION, oldCondition, condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.CONDITIONAL_EXP_LINK__FROM_NODE:
        if (resolve) return getFromNode();
        return basicGetFromNode();
      case XDSLPackage.CONDITIONAL_EXP_LINK__TO_NODE:
        if (resolve) return getToNode();
        return basicGetToNode();
      case XDSLPackage.CONDITIONAL_EXP_LINK__CONDITION:
        return getCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.CONDITIONAL_EXP_LINK__FROM_NODE:
        setFromNode((ExperimentNode)newValue);
        return;
      case XDSLPackage.CONDITIONAL_EXP_LINK__TO_NODE:
        setToNode((ExperimentNode)newValue);
        return;
      case XDSLPackage.CONDITIONAL_EXP_LINK__CONDITION:
        setCondition((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.CONDITIONAL_EXP_LINK__FROM_NODE:
        setFromNode((ExperimentNode)null);
        return;
      case XDSLPackage.CONDITIONAL_EXP_LINK__TO_NODE:
        setToNode((ExperimentNode)null);
        return;
      case XDSLPackage.CONDITIONAL_EXP_LINK__CONDITION:
        setCondition(CONDITION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.CONDITIONAL_EXP_LINK__FROM_NODE:
        return fromNode != null;
      case XDSLPackage.CONDITIONAL_EXP_LINK__TO_NODE:
        return toNode != null;
      case XDSLPackage.CONDITIONAL_EXP_LINK__CONDITION:
        return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (condition: ");
    result.append(condition);
    result.append(')');
    return result.toString();
  }

} //ConditionalExpLinkImpl
