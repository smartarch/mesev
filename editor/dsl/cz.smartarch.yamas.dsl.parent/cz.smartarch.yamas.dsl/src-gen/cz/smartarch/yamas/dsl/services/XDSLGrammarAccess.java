/*
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAsPackageAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAsPackagePackageKeyword_0_0_0 = (Keyword)cAsPackageAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWorkflowsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cWorkflowsWorkflowParserRuleCall_1_0_0 = (RuleCall)cWorkflowsAssignment_1_0.eContents().get(0);
		private final Assignment cGroupsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_1_1_0 = (RuleCall)cGroupsAssignment_1_1.eContents().get(0);
		private final Assignment cExperimentsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cExperimentsExperimentParserRuleCall_1_2_0 = (RuleCall)cExperimentsAssignment_1_2.eContents().get(0);
		
		//Root:
		//    (asPackage?= 'package' name=ID ';')?
		//    (
		//        workflows += Workflow        |
		//        groups += Group                |
		//        experiments += Experiment
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(asPackage?= 'package' name=ID ';')?
		//(
		//    workflows += Workflow        |
		//    groups += Group                |
		//    experiments += Experiment
		//)*
		public Group getGroup() { return cGroup; }
		
		//(asPackage?= 'package' name=ID ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//asPackage?= 'package'
		public Assignment getAsPackageAssignment_0_0() { return cAsPackageAssignment_0_0; }
		
		//'package'
		public Keyword getAsPackagePackageKeyword_0_0_0() { return cAsPackagePackageKeyword_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//(
		//    workflows += Workflow        |
		//    groups += Group                |
		//    experiments += Experiment
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//workflows += Workflow
		public Assignment getWorkflowsAssignment_1_0() { return cWorkflowsAssignment_1_0; }
		
		//Workflow
		public RuleCall getWorkflowsWorkflowParserRuleCall_1_0_0() { return cWorkflowsWorkflowParserRuleCall_1_0_0; }
		
		//groups += Group
		public Assignment getGroupsAssignment_1_1() { return cGroupsAssignment_1_1; }
		
		//Group
		public RuleCall getGroupsGroupParserRuleCall_1_1_0() { return cGroupsGroupParserRuleCall_1_1_0; }
		
		//experiments += Experiment
		public Assignment getExperimentsAssignment_1_2() { return cExperimentsAssignment_1_2; }
		
		//Experiment
		public RuleCall getExperimentsExperimentParserRuleCall_1_2_0() { return cExperimentsExperimentParserRuleCall_1_2_0; }
	}
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Workflow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeWorkflowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssembledWorkflowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*     # Workflow     */
		//// workflow is an abstract class that can be extended by the following classes
		//Workflow:
		//     CompositeWorkflow | TaskSpecification  | AssembledWorkflow
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeWorkflow | TaskSpecification  | AssembledWorkflow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositeWorkflow
		public RuleCall getCompositeWorkflowParserRuleCall_0() { return cCompositeWorkflowParserRuleCall_0; }
		
		//TaskSpecification
		public RuleCall getTaskSpecificationParserRuleCall_1() { return cTaskSpecificationParserRuleCall_1; }
		
		//AssembledWorkflow
		public RuleCall getAssembledWorkflowParserRuleCall_2() { return cAssembledWorkflowParserRuleCall_2; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////* ## InputData and OutputData */
		//Data:
		//    InputData | OutputData
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//InputData | OutputData
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InputData
		public RuleCall getInputDataParserRuleCall_0() { return cInputDataParserRuleCall_0; }
		
		//OutputData
		public RuleCall getOutputDataParserRuleCall_1() { return cOutputDataParserRuleCall_1; }
	}
	public class InputDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.InputData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputData:
		//    'input' 'data' name=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' 'data' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class OutputDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.OutputData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OutputData:
		//    'output' 'data' name=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'output' 'data' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class DataConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.DataConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDataDataCrossReference_2_0 = (CrossReference)cDataAssignment_2.eContents().get(0);
		private final RuleCall cDataDataIDTerminalRuleCall_2_0_1 = (RuleCall)cDataDataCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cPathKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cPathAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_4_0_1_0 = (RuleCall)cPathAssignment_4_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cUnorderedGroup_4.eContents().get(1);
		private final Keyword cTypeKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cTypeAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_4_1_1_0 = (RuleCall)cTypeAssignment_4_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Keyword cDefaultKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cDefaultValueParamValueParserRuleCall_4_2_1_0 = (RuleCall)cDefaultValueAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2_2 = (Keyword)cGroup_4_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataConfiguration:
		//    'configure' 'data' data=[Data] '{'
		//    (('path' path=STRING ';')? & ('type' type=STRING ';')?
		//        &     ('default' defaultValue=ParamValue ';')?
		//    )
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'configure' 'data' data=[Data] '{'
		//(('path' path=STRING ';')? & ('type' type=STRING ';')?
		//    &     ('default' defaultValue=ParamValue ';')?
		//)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'configure'
		public Keyword getConfigureKeyword_0() { return cConfigureKeyword_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//data=[Data]
		public Assignment getDataAssignment_2() { return cDataAssignment_2; }
		
		//[Data]
		public CrossReference getDataDataCrossReference_2_0() { return cDataDataCrossReference_2_0; }
		
		//ID
		public RuleCall getDataDataIDTerminalRuleCall_2_0_1() { return cDataDataIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(('path' path=STRING ';')? & ('type' type=STRING ';')?
		//    &     ('default' defaultValue=ParamValue ';')?
		//)
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//('path' path=STRING ';')?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'path'
		public Keyword getPathKeyword_4_0_0() { return cPathKeyword_4_0_0; }
		
		//path=STRING
		public Assignment getPathAssignment_4_0_1() { return cPathAssignment_4_0_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_4_0_1_0() { return cPathSTRINGTerminalRuleCall_4_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0_2() { return cSemicolonKeyword_4_0_2; }
		
		//('type' type=STRING ';')?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'type'
		public Keyword getTypeKeyword_4_1_0() { return cTypeKeyword_4_1_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_4_1_1() { return cTypeAssignment_4_1_1; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_4_1_1_0() { return cTypeSTRINGTerminalRuleCall_4_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1_2() { return cSemicolonKeyword_4_1_2; }
		
		//('default' defaultValue=ParamValue ';')?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'default'
		public Keyword getDefaultKeyword_4_2_0() { return cDefaultKeyword_4_2_0; }
		
		//defaultValue=ParamValue
		public Assignment getDefaultValueAssignment_4_2_1() { return cDefaultValueAssignment_4_2_1; }
		
		//ParamValue
		public RuleCall getDefaultValueParamValueParserRuleCall_4_2_1_0() { return cDefaultValueParamValueParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2_2() { return cSemicolonKeyword_4_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DataLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.DataLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cInputDataTaskAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cInputDataTaskTaskCrossReference_0_0_0_0 = (CrossReference)cInputDataTaskAssignment_0_0_0.eContents().get(0);
		private final RuleCall cInputDataTaskTaskIDTerminalRuleCall_0_0_0_0_1 = (RuleCall)cInputDataTaskTaskCrossReference_0_0_0_0.eContents().get(1);
		private final Assignment cAsInputTaskAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Keyword cAsInputTaskFullStopKeyword_0_0_1_0 = (Keyword)cAsInputTaskAssignment_0_0_1.eContents().get(0);
		private final Assignment cInputDataAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cInputDataDataCrossReference_0_1_0 = (CrossReference)cInputDataAssignment_0_1.eContents().get(0);
		private final RuleCall cInputDataDataIDTerminalRuleCall_0_1_0_1 = (RuleCall)cInputDataDataCrossReference_0_1_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cOutputDataTaskAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final CrossReference cOutputDataTaskTaskCrossReference_2_0_0_0 = (CrossReference)cOutputDataTaskAssignment_2_0_0.eContents().get(0);
		private final RuleCall cOutputDataTaskTaskIDTerminalRuleCall_2_0_0_0_1 = (RuleCall)cOutputDataTaskTaskCrossReference_2_0_0_0.eContents().get(1);
		private final Assignment cAsOutputTaskAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cAsOutputTaskFullStopKeyword_2_0_1_0 = (Keyword)cAsOutputTaskAssignment_2_0_1.eContents().get(0);
		private final Assignment cOutputDataAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cOutputDataDataCrossReference_2_1_0 = (CrossReference)cOutputDataAssignment_2_1.eContents().get(0);
		private final RuleCall cOutputDataDataIDTerminalRuleCall_2_1_0_1 = (RuleCall)cOutputDataDataCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* ## DataLink */
		//DataLink:
		//    ((inputDataTask=[Task] asInputTask?='.')?  inputData=[Data|ID])
		//    '-->'
		//    ((outputDataTask=[Task] asOutputTask?='.')? outputData=[Data|ID])
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((inputDataTask=[Task] asInputTask?='.')?  inputData=[Data|ID])
		//'-->'
		//((outputDataTask=[Task] asOutputTask?='.')? outputData=[Data|ID])
		//';'
		public Group getGroup() { return cGroup; }
		
		//((inputDataTask=[Task] asInputTask?='.')?  inputData=[Data|ID])
		public Group getGroup_0() { return cGroup_0; }
		
		//(inputDataTask=[Task] asInputTask?='.')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//inputDataTask=[Task]
		public Assignment getInputDataTaskAssignment_0_0_0() { return cInputDataTaskAssignment_0_0_0; }
		
		//[Task]
		public CrossReference getInputDataTaskTaskCrossReference_0_0_0_0() { return cInputDataTaskTaskCrossReference_0_0_0_0; }
		
		//ID
		public RuleCall getInputDataTaskTaskIDTerminalRuleCall_0_0_0_0_1() { return cInputDataTaskTaskIDTerminalRuleCall_0_0_0_0_1; }
		
		//asInputTask?='.'
		public Assignment getAsInputTaskAssignment_0_0_1() { return cAsInputTaskAssignment_0_0_1; }
		
		//'.'
		public Keyword getAsInputTaskFullStopKeyword_0_0_1_0() { return cAsInputTaskFullStopKeyword_0_0_1_0; }
		
		//inputData=[Data|ID]
		public Assignment getInputDataAssignment_0_1() { return cInputDataAssignment_0_1; }
		
		//[Data|ID]
		public CrossReference getInputDataDataCrossReference_0_1_0() { return cInputDataDataCrossReference_0_1_0; }
		
		//ID
		public RuleCall getInputDataDataIDTerminalRuleCall_0_1_0_1() { return cInputDataDataIDTerminalRuleCall_0_1_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }
		
		//((outputDataTask=[Task] asOutputTask?='.')? outputData=[Data|ID])
		public Group getGroup_2() { return cGroup_2; }
		
		//(outputDataTask=[Task] asOutputTask?='.')?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//outputDataTask=[Task]
		public Assignment getOutputDataTaskAssignment_2_0_0() { return cOutputDataTaskAssignment_2_0_0; }
		
		//[Task]
		public CrossReference getOutputDataTaskTaskCrossReference_2_0_0_0() { return cOutputDataTaskTaskCrossReference_2_0_0_0; }
		
		//ID
		public RuleCall getOutputDataTaskTaskIDTerminalRuleCall_2_0_0_0_1() { return cOutputDataTaskTaskIDTerminalRuleCall_2_0_0_0_1; }
		
		//asOutputTask?='.'
		public Assignment getAsOutputTaskAssignment_2_0_1() { return cAsOutputTaskAssignment_2_0_1; }
		
		//'.'
		public Keyword getAsOutputTaskFullStopKeyword_2_0_1_0() { return cAsOutputTaskFullStopKeyword_2_0_1_0; }
		
		//outputData=[Data|ID]
		public Assignment getOutputDataAssignment_2_1() { return cOutputDataAssignment_2_1; }
		
		//[Data|ID]
		public CrossReference getOutputDataDataCrossReference_2_1_0() { return cOutputDataDataCrossReference_2_1_0; }
		
		//ID
		public RuleCall getOutputDataDataIDTerminalRuleCall_2_1_0_1() { return cOutputDataDataIDTerminalRuleCall_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CompositeWorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.CompositeWorkflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Assignment cOutputsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_3_1_0 = (RuleCall)cOutputsAssignment_3_1.eContents().get(0);
		private final Assignment cLinksAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cLinksLinkParserRuleCall_3_2_0 = (RuleCall)cLinksAssignment_3_2.eContents().get(0);
		private final Assignment cDataLinksAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cDataLinksDataLinkParserRuleCall_3_3_0 = (RuleCall)cDataLinksAssignment_3_3.eContents().get(0);
		private final Assignment cNodesAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cNodesNodeParserRuleCall_3_4_0 = (RuleCall)cNodesAssignment_3_4.eContents().get(0);
		private final Assignment cDataConfigurationsAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cDataConfigurationsDataConfigurationParserRuleCall_3_5_0 = (RuleCall)cDataConfigurationsAssignment_3_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ## CompositeWorkflow */
		////
		//CompositeWorkflow:
		//    'workflow' name=ID '{'
		//        (
		////            // shared members (i.e. super members)
		//            inputs += InputData                        |
		//            outputs += OutputData                    |
		////
		////            // dedicated members
		//            links += Link                            |
		//            dataLinks += DataLink                    |
		//            nodes += Node                            |
		////
		////            // execution members
		//            dataConfigurations += DataConfiguration
		//        )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    'workflow' name=ID '{'
		//        (
		////            // shared members (i.e. super members)
		//            inputs += InputData                        |
		//            outputs += OutputData                    |
		////
		////            // dedicated members
		//            links += Link                            |
		//            dataLinks += DataLink                    |
		//            nodes += Node                            |
		////
		////            // execution members
		//            dataConfigurations += DataConfiguration
		//        )*
		//    '}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//        (
		////            // shared members (i.e. super members)
		//            inputs += InputData                        |
		//            outputs += OutputData                    |
		////
		////            // dedicated members
		//            links += Link                            |
		//            dataLinks += DataLink                    |
		//            nodes += Node                            |
		////
		////            // execution members
		//            dataConfigurations += DataConfiguration
		//        )*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		////            // shared members (i.e. super members)
		//            inputs += InputData
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_3_0_0() { return cInputsInputDataParserRuleCall_3_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_3_1() { return cOutputsAssignment_3_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_3_1_0() { return cOutputsOutputDataParserRuleCall_3_1_0; }
		
		////
		////            // dedicated members
		//            links += Link
		public Assignment getLinksAssignment_3_2() { return cLinksAssignment_3_2; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_3_2_0() { return cLinksLinkParserRuleCall_3_2_0; }
		
		//dataLinks += DataLink
		public Assignment getDataLinksAssignment_3_3() { return cDataLinksAssignment_3_3; }
		
		//DataLink
		public RuleCall getDataLinksDataLinkParserRuleCall_3_3_0() { return cDataLinksDataLinkParserRuleCall_3_3_0; }
		
		//nodes += Node
		public Assignment getNodesAssignment_3_4() { return cNodesAssignment_3_4; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_3_4_0() { return cNodesNodeParserRuleCall_3_4_0; }
		
		////
		////            // execution members
		//            dataConfigurations += DataConfiguration
		public Assignment getDataConfigurationsAssignment_3_5() { return cDataConfigurationsAssignment_3_5; }
		
		//DataConfiguration
		public RuleCall getDataConfigurationsDataConfigurationParserRuleCall_3_5_0() { return cDataConfigurationsDataConfigurationParserRuleCall_3_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/////* ## Node */
		//Node:
		//    Task | Event | Operator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Task | Event | Operator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Task
		public RuleCall getTaskParserRuleCall_0() { return cTaskParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2() { return cOperatorParserRuleCall_2; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAbstractAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAbstractSemicolonKeyword_2_0_0 = (Keyword)cAbstractAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cConfiguredAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cConfiguredLeftCurlyBracketKeyword_2_1_0_0 = (Keyword)cConfiguredAssignment_2_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Assignment cInputsAssignment_2_1_1_0 = (Assignment)cAlternatives_2_1_1.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_2_1_1_0_0 = (RuleCall)cInputsAssignment_2_1_1_0.eContents().get(0);
		private final Assignment cOutputsAssignment_2_1_1_1 = (Assignment)cAlternatives_2_1_1.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_2_1_1_1_0 = (RuleCall)cOutputsAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1_2 = (Assignment)cAlternatives_2_1_1.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_2_1_1_2_0 = (RuleCall)cParamsAssignment_2_1_1_2.eContents().get(0);
		private final Group cGroup_2_1_1_3 = (Group)cAlternatives_2_1_1.eContents().get(3);
		private final Keyword cMetadataKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Assignment cMetadataAssignment_2_1_1_3_2 = (Assignment)cGroup_2_1_1_3.eContents().get(2);
		private final RuleCall cMetadataMetaDataParserRuleCall_2_1_1_3_2_0 = (RuleCall)cMetadataAssignment_2_1_1_3_2.eContents().get(0);
		private final Group cGroup_2_1_1_3_3 = (Group)cGroup_2_1_1_3.eContents().get(3);
		private final Keyword cCommaKeyword_2_1_1_3_3_0 = (Keyword)cGroup_2_1_1_3_3.eContents().get(0);
		private final Assignment cMetadataAssignment_2_1_1_3_3_1 = (Assignment)cGroup_2_1_1_3_3.eContents().get(1);
		private final RuleCall cMetadataMetaDataParserRuleCall_2_1_1_3_3_1_0 = (RuleCall)cMetadataAssignment_2_1_1_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1_3_4 = (Keyword)cGroup_2_1_1_3.eContents().get(4);
		private final Group cGroup_2_1_1_4 = (Group)cAlternatives_2_1_1.eContents().get(4);
		private final Keyword cDescriptionKeyword_2_1_1_4_0 = (Keyword)cGroup_2_1_1_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1_1_4_1 = (Assignment)cGroup_2_1_1_4.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_4_1_0 = (RuleCall)cDescriptionAssignment_2_1_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_4_2 = (Keyword)cGroup_2_1_1_4.eContents().get(2);
		private final Group cGroup_2_1_1_5 = (Group)cAlternatives_2_1_1.eContents().get(5);
		private final Keyword cImplementationKeyword_2_1_1_5_0 = (Keyword)cGroup_2_1_1_5.eContents().get(0);
		private final Assignment cPrimitiveImplementationAssignment_2_1_1_5_1 = (Assignment)cGroup_2_1_1_5.eContents().get(1);
		private final RuleCall cPrimitiveImplementationSTRINGTerminalRuleCall_2_1_1_5_1_0 = (RuleCall)cPrimitiveImplementationAssignment_2_1_1_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_5_2 = (Keyword)cGroup_2_1_1_5.eContents().get(2);
		private final Group cGroup_2_1_1_6 = (Group)cAlternatives_2_1_1.eContents().get(6);
		private final Keyword cSubworkflowKeyword_2_1_1_6_0 = (Keyword)cGroup_2_1_1_6.eContents().get(0);
		private final Assignment cSubworkflowAssignment_2_1_1_6_1 = (Assignment)cGroup_2_1_1_6.eContents().get(1);
		private final RuleCall cSubworkflowSTRINGTerminalRuleCall_2_1_1_6_1_0 = (RuleCall)cSubworkflowAssignment_2_1_1_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_6_2 = (Keyword)cGroup_2_1_1_6.eContents().get(2);
		private final Group cGroup_2_1_1_7 = (Group)cAlternatives_2_1_1.eContents().get(7);
		private final Keyword cDependencyKeyword_2_1_1_7_0 = (Keyword)cGroup_2_1_1_7.eContents().get(0);
		private final Assignment cDependencyAssignment_2_1_1_7_1 = (Assignment)cGroup_2_1_1_7.eContents().get(1);
		private final RuleCall cDependencySTRINGTerminalRuleCall_2_1_1_7_1_0 = (RuleCall)cDependencyAssignment_2_1_1_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_7_2 = (Keyword)cGroup_2_1_1_7.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////
		/////* ### Task */
		//Task:
		//     'task' name=ID (abstract?=';' | configured?=    '{' (
		//            // shared members (i.e. super members)
		//            inputs += InputData            |
		//            outputs += OutputData         |
		//            params += Param                |
		//            // special members
		//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//            // single members
		//            'description' description=STRING ';'        |
		//            'implementation' primitiveImplementation=STRING ';'    |
		//            'subworkflow' subworkflow=STRING ';'                |
		//            'dependency' dependency=STRING ';'
		//    )*
		//    '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// 'task' name=ID (abstract?=';' | configured?=    '{' (
		//        // shared members (i.e. super members)
		//        inputs += InputData            |
		//        outputs += OutputData         |
		//        params += Param                |
		//        // special members
		//        ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//        // single members
		//        'description' description=STRING ';'        |
		//        'implementation' primitiveImplementation=STRING ';'    |
		//        'subworkflow' subworkflow=STRING ';'                |
		//        'dependency' dependency=STRING ';'
		//)*
		//'}')
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(abstract?=';' | configured?=    '{' (
		//           // shared members (i.e. super members)
		//           inputs += InputData            |
		//           outputs += OutputData         |
		//           params += Param                |
		//           // special members
		//           ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//           // single members
		//           'description' description=STRING ';'        |
		//           'implementation' primitiveImplementation=STRING ';'    |
		//           'subworkflow' subworkflow=STRING ';'                |
		//           'dependency' dependency=STRING ';'
		//   )*
		//   '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//abstract?=';'
		public Assignment getAbstractAssignment_2_0() { return cAbstractAssignment_2_0; }
		
		//';'
		public Keyword getAbstractSemicolonKeyword_2_0_0() { return cAbstractSemicolonKeyword_2_0_0; }
		
		//configured?=    '{' (
		//           // shared members (i.e. super members)
		//           inputs += InputData            |
		//           outputs += OutputData         |
		//           params += Param                |
		//           // special members
		//           ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//           // single members
		//           'description' description=STRING ';'        |
		//           'implementation' primitiveImplementation=STRING ';'    |
		//           'subworkflow' subworkflow=STRING ';'                |
		//           'dependency' dependency=STRING ';'
		//   )*
		//   '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//configured?=	'{'
		public Assignment getConfiguredAssignment_2_1_0() { return cConfiguredAssignment_2_1_0; }
		
		//'{'
		public Keyword getConfiguredLeftCurlyBracketKeyword_2_1_0_0() { return cConfiguredLeftCurlyBracketKeyword_2_1_0_0; }
		
		//(
		//           // shared members (i.e. super members)
		//           inputs += InputData            |
		//           outputs += OutputData         |
		//           params += Param                |
		//           // special members
		//           ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//           // single members
		//           'description' description=STRING ';'        |
		//           'implementation' primitiveImplementation=STRING ';'    |
		//           'subworkflow' subworkflow=STRING ';'                |
		//           'dependency' dependency=STRING ';'
		//   )*
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//// shared members (i.e. super members)
		//inputs += InputData
		public Assignment getInputsAssignment_2_1_1_0() { return cInputsAssignment_2_1_1_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_2_1_1_0_0() { return cInputsInputDataParserRuleCall_2_1_1_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_2_1_1_1() { return cOutputsAssignment_2_1_1_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_2_1_1_1_0() { return cOutputsOutputDataParserRuleCall_2_1_1_1_0; }
		
		//params += Param
		public Assignment getParamsAssignment_2_1_1_2() { return cParamsAssignment_2_1_1_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_2_1_1_2_0() { return cParamsParamParserRuleCall_2_1_1_2_0; }
		
		//// special members
		//('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' )
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }
		
		//'metadata'
		public Keyword getMetadataKeyword_2_1_1_3_0() { return cMetadataKeyword_2_1_1_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_1_3_1() { return cLeftCurlyBracketKeyword_2_1_1_3_1; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_2_1_1_3_2() { return cMetadataAssignment_2_1_1_3_2; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_2_1_1_3_2_0() { return cMetadataMetaDataParserRuleCall_2_1_1_3_2_0; }
		
		//(',' metadata += MetaData)
		public Group getGroup_2_1_1_3_3() { return cGroup_2_1_1_3_3; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_3_3_0() { return cCommaKeyword_2_1_1_3_3_0; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_2_1_1_3_3_1() { return cMetadataAssignment_2_1_1_3_3_1; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_2_1_1_3_3_1_0() { return cMetadataMetaDataParserRuleCall_2_1_1_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_1_3_4() { return cRightCurlyBracketKeyword_2_1_1_3_4; }
		
		//// single members
		//'description' description=STRING ';'
		public Group getGroup_2_1_1_4() { return cGroup_2_1_1_4; }
		
		//// single members
		//'description'
		public Keyword getDescriptionKeyword_2_1_1_4_0() { return cDescriptionKeyword_2_1_1_4_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_4_1() { return cDescriptionAssignment_2_1_1_4_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_4_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_4_2() { return cSemicolonKeyword_2_1_1_4_2; }
		
		//'implementation' primitiveImplementation=STRING ';'
		public Group getGroup_2_1_1_5() { return cGroup_2_1_1_5; }
		
		//'implementation'
		public Keyword getImplementationKeyword_2_1_1_5_0() { return cImplementationKeyword_2_1_1_5_0; }
		
		//primitiveImplementation=STRING
		public Assignment getPrimitiveImplementationAssignment_2_1_1_5_1() { return cPrimitiveImplementationAssignment_2_1_1_5_1; }
		
		//STRING
		public RuleCall getPrimitiveImplementationSTRINGTerminalRuleCall_2_1_1_5_1_0() { return cPrimitiveImplementationSTRINGTerminalRuleCall_2_1_1_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_5_2() { return cSemicolonKeyword_2_1_1_5_2; }
		
		//'subworkflow' subworkflow=STRING ';'
		public Group getGroup_2_1_1_6() { return cGroup_2_1_1_6; }
		
		//'subworkflow'
		public Keyword getSubworkflowKeyword_2_1_1_6_0() { return cSubworkflowKeyword_2_1_1_6_0; }
		
		//subworkflow=STRING
		public Assignment getSubworkflowAssignment_2_1_1_6_1() { return cSubworkflowAssignment_2_1_1_6_1; }
		
		//STRING
		public RuleCall getSubworkflowSTRINGTerminalRuleCall_2_1_1_6_1_0() { return cSubworkflowSTRINGTerminalRuleCall_2_1_1_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_6_2() { return cSemicolonKeyword_2_1_1_6_2; }
		
		//'dependency' dependency=STRING ';'
		public Group getGroup_2_1_1_7() { return cGroup_2_1_1_7; }
		
		//'dependency'
		public Keyword getDependencyKeyword_2_1_1_7_0() { return cDependencyKeyword_2_1_1_7_0; }
		
		//dependency=STRING
		public Assignment getDependencyAssignment_2_1_1_7_1() { return cDependencyAssignment_2_1_1_7_1; }
		
		//STRING
		public RuleCall getDependencySTRINGTerminalRuleCall_2_1_1_7_1_0() { return cDependencySTRINGTerminalRuleCall_2_1_1_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_7_2() { return cSemicolonKeyword_2_1_1_7_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MetaDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.MetaData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MetaData:
		//    name=STRING ':' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEventValueEnumRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///* ### Event as Singltons */
		//Event:
		//    name=EventValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EventValue
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EventValue
		public RuleCall getNameEventValueEnumRuleCall_0() { return cNameEventValueEnumRuleCall_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJoinParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExclusiveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInclusiveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* ### Operator */
		//Operator:
		//    Join | Parallel  | Exclusive | Inclusive
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Join | Parallel  | Exclusive | Inclusive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Join
		public RuleCall getJoinParserRuleCall_0() { return cJoinParserRuleCall_0; }
		
		//Parallel
		public RuleCall getParallelParserRuleCall_1() { return cParallelParserRuleCall_1; }
		
		//Exclusive
		public RuleCall getExclusiveParserRuleCall_2() { return cExclusiveParserRuleCall_2; }
		
		//Inclusive
		public RuleCall getInclusiveParserRuleCall_3() { return cInclusiveParserRuleCall_3; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Join");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameJOIN_TERMTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Join :
		//    name=JOIN_TERM
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=JOIN_TERM
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//JOIN_TERM
		public RuleCall getNameJOIN_TERMTerminalRuleCall_0() { return cNameJOIN_TERMTerminalRuleCall_0; }
	}
	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Parallel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePARALLEL_TERMTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parallel :
		//    name=PARALLEL_TERM
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PARALLEL_TERM
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PARALLEL_TERM
		public RuleCall getNamePARALLEL_TERMTerminalRuleCall_0() { return cNamePARALLEL_TERMTerminalRuleCall_0; }
	}
	public class ExclusiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Exclusive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEXCLUSIVE_TERMTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Exclusive :
		//    name=EXCLUSIVE_TERM  '{'
		//    conditions += Condition+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EXCLUSIVE_TERM  '{'
		//conditions += Condition+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EXCLUSIVE_TERM
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EXCLUSIVE_TERM
		public RuleCall getNameEXCLUSIVE_TERMTerminalRuleCall_0_0() { return cNameEXCLUSIVE_TERMTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//conditions += Condition+
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_0() { return cConditionsConditionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InclusiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Inclusive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameINCLUSIVE_TERMTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Inclusive :
		//    name=INCLUSIVE_TERM  '{'
		//        conditions += Condition+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=INCLUSIVE_TERM  '{'
		//    conditions += Condition+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=INCLUSIVE_TERM
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//INCLUSIVE_TERM
		public RuleCall getNameINCLUSIVE_TERMTerminalRuleCall_0_0() { return cNameINCLUSIVE_TERMTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//conditions += Condition+
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_0() { return cConditionsConditionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesCaseParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//    'condition' condition=STRING '{'
		//        cases+=Case+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'condition' condition=STRING '{'
		//    cases+=Case+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_0() { return cConditionSTRINGTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//cases+=Case+
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_3_0() { return cCasesCaseParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseSTRINGTerminalRuleCall_0_0 = (RuleCall)cCaseAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetNodeCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetNodeCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Case:
		//    case=STRING target=[Node] ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//case=STRING target=[Node] ';'
		public Group getGroup() { return cGroup; }
		
		//case=STRING
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }
		
		//STRING
		public RuleCall getCaseSTRINGTerminalRuleCall_0_0() { return cCaseSTRINGTerminalRuleCall_0_0; }
		
		//target=[Node]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Node]
		public CrossReference getTargetNodeCrossReference_1_0() { return cTargetNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetNodeIDTerminalRuleCall_1_0_1() { return cTargetNodeIDTerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Link");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegularLinksParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExceptionalLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* ## LINK */
		//Link:
		//    ConditionalLink | RegularLinks | ExceptionalLink
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalLink | RegularLinks | ExceptionalLink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionalLink
		public RuleCall getConditionalLinkParserRuleCall_0() { return cConditionalLinkParserRuleCall_0; }
		
		//RegularLinks
		public RuleCall getRegularLinksParserRuleCall_1() { return cRegularLinksParserRuleCall_1; }
		
		//ExceptionalLink
		public RuleCall getExceptionalLinkParserRuleCall_2() { return cExceptionalLinkParserRuleCall_2; }
	}
	public class NodeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.NodeLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTaskAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cTaskTaskCrossReference_0_0 = (CrossReference)cTaskAssignment_0.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_0_0_1 = (RuleCall)cTaskTaskCrossReference_0_0.eContents().get(1);
		private final Assignment cEventAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		
		//NodeLink:
		//    task=[Task] | event=Event
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//task=[Task] | event=Event
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//task=[Task]
		public Assignment getTaskAssignment_0() { return cTaskAssignment_0; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_0_0() { return cTaskTaskCrossReference_0_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_0_0_1() { return cTaskTaskIDTerminalRuleCall_0_0_1; }
		
		//event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }
	}
	public class ConditionalLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ConditionalLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputNodeLinkParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cQuestionMarkHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputNodeLinkParserRuleCall_2_0 = (RuleCall)cOutputAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionSTRINGTerminalRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConditionalLink:
		//    input=NodeLink '?->' output=NodeLink '{'
		//            "condition" condition=STRING ';'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//input=NodeLink '?->' output=NodeLink '{'
		//        "condition" condition=STRING ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//input=NodeLink
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//NodeLink
		public RuleCall getInputNodeLinkParserRuleCall_0_0() { return cInputNodeLinkParserRuleCall_0_0; }
		
		//'?->'
		public Keyword getQuestionMarkHyphenMinusGreaterThanSignKeyword_1() { return cQuestionMarkHyphenMinusGreaterThanSignKeyword_1; }
		
		//output=NodeLink
		public Assignment getOutputAssignment_2() { return cOutputAssignment_2; }
		
		//NodeLink
		public RuleCall getOutputNodeLinkParserRuleCall_2_0() { return cOutputNodeLinkParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//"condition"
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//condition=STRING
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_5_0() { return cConditionSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RegularLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.RegularLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputNodeLinkParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOuputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOuputNodeLinkParserRuleCall_2_0 = (RuleCall)cOuputAssignment_2.eContents().get(0);
		
		//RegularLink:
		//    input=NodeLink '->' ouput=NodeLink
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//input=NodeLink '->' ouput=NodeLink
		public Group getGroup() { return cGroup; }
		
		//input=NodeLink
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//NodeLink
		public RuleCall getInputNodeLinkParserRuleCall_0_0() { return cInputNodeLinkParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//ouput=NodeLink
		public Assignment getOuputAssignment_2() { return cOuputAssignment_2; }
		
		//NodeLink
		public RuleCall getOuputNodeLinkParserRuleCall_2_0() { return cOuputNodeLinkParserRuleCall_2_0; }
	}
	public class RegularLinksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.RegularLinks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputNodeLinkParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLinksAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinksRegularLinkParserRuleCall_1_1_0 = (RuleCall)cLinksAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOutputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutputNodeLinkParserRuleCall_3_0 = (RuleCall)cOutputAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RegularLinks:
		//    input=NodeLink ('->' links+=RegularLink)* '->' output=NodeLink ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//input=NodeLink ('->' links+=RegularLink)* '->' output=NodeLink ';'
		public Group getGroup() { return cGroup; }
		
		//input=NodeLink
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//NodeLink
		public RuleCall getInputNodeLinkParserRuleCall_0_0() { return cInputNodeLinkParserRuleCall_0_0; }
		
		//('->' links+=RegularLink)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//links+=RegularLink
		public Assignment getLinksAssignment_1_1() { return cLinksAssignment_1_1; }
		
		//RegularLink
		public RuleCall getLinksRegularLinkParserRuleCall_1_1_0() { return cLinksRegularLinkParserRuleCall_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//output=NodeLink
		public Assignment getOutputAssignment_3() { return cOutputAssignment_3; }
		
		//NodeLink
		public RuleCall getOutputNodeLinkParserRuleCall_3_0() { return cOutputNodeLinkParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ExceptionalLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExceptionalLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputNodeLinkParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Keyword cExclamationMarkHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputNodeLinkParserRuleCall_2_0 = (RuleCall)cOutputAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEventKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventSTRINGTerminalRuleCall_5_0 = (RuleCall)cEventAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExceptionalLink:
		//    input=NodeLink '!->' output=NodeLink '{'
		//        "event" event=STRING ';'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//input=NodeLink '!->' output=NodeLink '{'
		//    "event" event=STRING ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//input=NodeLink
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//NodeLink
		public RuleCall getInputNodeLinkParserRuleCall_0_0() { return cInputNodeLinkParserRuleCall_0_0; }
		
		//'!->'
		public Keyword getExclamationMarkHyphenMinusGreaterThanSignKeyword_1() { return cExclamationMarkHyphenMinusGreaterThanSignKeyword_1; }
		
		//output=NodeLink
		public Assignment getOutputAssignment_2() { return cOutputAssignment_2; }
		
		//NodeLink
		public RuleCall getOutputNodeLinkParserRuleCall_2_0() { return cOutputNodeLinkParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//"event"
		public Keyword getEventKeyword_4() { return cEventKeyword_4; }
		
		//event=STRING
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//STRING
		public RuleCall getEventSTRINGTerminalRuleCall_5_0() { return cEventSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTasksAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cTasksTaskCrossReference_3_0_0 = (CrossReference)cTasksAssignment_3_0.eContents().get(0);
		private final RuleCall cTasksTaskIDTerminalRuleCall_3_0_0_1 = (RuleCall)cTasksTaskCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTasksAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cTasksTaskCrossReference_3_1_1_0 = (CrossReference)cTasksAssignment_3_1_1.eContents().get(0);
		private final RuleCall cTasksTaskIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cTasksTaskCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///*     # Group     */
		//Group:
		//    'group' name=ID '{'
		//        (tasks+=[Task] (',' tasks+=[Task])* ';')
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'group' name=ID '{'
		//    (tasks+=[Task] (',' tasks+=[Task])* ';')
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(tasks+=[Task] (',' tasks+=[Task])* ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//tasks+=[Task]
		public Assignment getTasksAssignment_3_0() { return cTasksAssignment_3_0; }
		
		//[Task]
		public CrossReference getTasksTaskCrossReference_3_0_0() { return cTasksTaskCrossReference_3_0_0; }
		
		//ID
		public RuleCall getTasksTaskIDTerminalRuleCall_3_0_0_1() { return cTasksTaskIDTerminalRuleCall_3_0_0_1; }
		
		//(',' tasks+=[Task])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//tasks+=[Task]
		public Assignment getTasksAssignment_3_1_1() { return cTasksAssignment_3_1_1; }
		
		//[Task]
		public CrossReference getTasksTaskCrossReference_3_1_1_0() { return cTasksTaskCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getTasksTaskIDTerminalRuleCall_3_1_1_0_1() { return cTasksTaskIDTerminalRuleCall_3_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AssembledWorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.AssembledWorkflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParentWorkflowCrossReference_3_0 = (CrossReference)cParentAssignment_3.eContents().get(0);
		private final RuleCall cParentWorkflowIDTerminalRuleCall_3_0_1 = (RuleCall)cParentWorkflowCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cInputsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_5_0_0 = (RuleCall)cInputsAssignment_5_0.eContents().get(0);
		private final Assignment cOutputsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_5_1_0 = (RuleCall)cOutputsAssignment_5_1.eContents().get(0);
		private final Assignment cSubstitutedTasksAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cSubstitutedTasksSubstitutedTaskParserRuleCall_5_2_0 = (RuleCall)cSubstitutedTasksAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///* ## AssembledWorkflow */
		//AssembledWorkflow:
		//    'workflow' name=ID 'from' parent=[Workflow] '{'
		//        (
		//            // shared members (i.e. super members)
		//            inputs += InputData            |
		//            outputs += OutputData         |
		//            // dedicated members
		//            substitutedTasks += SubstitutedTask
		//        )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID 'from' parent=[Workflow] '{'
		//    (
		//        // shared members (i.e. super members)
		//        inputs += InputData            |
		//        outputs += OutputData         |
		//        // dedicated members
		//        substitutedTasks += SubstitutedTask
		//    )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//parent=[Workflow]
		public Assignment getParentAssignment_3() { return cParentAssignment_3; }
		
		//[Workflow]
		public CrossReference getParentWorkflowCrossReference_3_0() { return cParentWorkflowCrossReference_3_0; }
		
		//ID
		public RuleCall getParentWorkflowIDTerminalRuleCall_3_0_1() { return cParentWorkflowIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(
		//    // shared members (i.e. super members)
		//    inputs += InputData            |
		//    outputs += OutputData         |
		//    // dedicated members
		//    substitutedTasks += SubstitutedTask
		//)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//// shared members (i.e. super members)
		//inputs += InputData
		public Assignment getInputsAssignment_5_0() { return cInputsAssignment_5_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_5_0_0() { return cInputsInputDataParserRuleCall_5_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_5_1() { return cOutputsAssignment_5_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_5_1_0() { return cOutputsOutputDataParserRuleCall_5_1_0; }
		
		//// dedicated members
		//substitutedTasks += SubstitutedTask
		public Assignment getSubstitutedTasksAssignment_5_2() { return cSubstitutedTasksAssignment_5_2; }
		
		//SubstitutedTask
		public RuleCall getSubstitutedTasksSubstitutedTaskParserRuleCall_5_2_0() { return cSubstitutedTasksSubstitutedTaskParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SubstitutedTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.SubstitutedTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameTaskCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cNameTaskCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Assignment cOutputsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_3_1_0 = (RuleCall)cOutputsAssignment_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_3_2_0 = (RuleCall)cParamsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Keyword cMetadataKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cMetadataAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cMetadataMetaDataParserRuleCall_3_3_2_0 = (RuleCall)cMetadataAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_3_3 = (Group)cGroup_3_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_3_0 = (Keyword)cGroup_3_3_3.eContents().get(0);
		private final Assignment cMetadataAssignment_3_3_3_1 = (Assignment)cGroup_3_3_3.eContents().get(1);
		private final RuleCall cMetadataMetaDataParserRuleCall_3_3_3_1_0 = (RuleCall)cMetadataAssignment_3_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3_4 = (Keyword)cGroup_3_3.eContents().get(4);
		private final Group cGroup_3_4 = (Group)cAlternatives_3.eContents().get(4);
		private final Keyword cDescriptionKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_4_1_0 = (RuleCall)cDescriptionAssignment_3_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4_2 = (Keyword)cGroup_3_4.eContents().get(2);
		private final Group cGroup_3_5 = (Group)cAlternatives_3.eContents().get(5);
		private final Keyword cImplementationKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cPrimitiveImplementationAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cPrimitiveImplementationSTRINGTerminalRuleCall_3_5_1_0 = (RuleCall)cPrimitiveImplementationAssignment_3_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_5_2 = (Keyword)cGroup_3_5.eContents().get(2);
		private final Group cGroup_3_6 = (Group)cAlternatives_3.eContents().get(6);
		private final Keyword cSubworkflowKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cSubworkflowAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cSubworkflowSTRINGTerminalRuleCall_3_6_1_0 = (RuleCall)cSubworkflowAssignment_3_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_6_2 = (Keyword)cGroup_3_6.eContents().get(2);
		private final Group cGroup_3_7 = (Group)cAlternatives_3.eContents().get(7);
		private final Keyword cDependencyKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cDependencyAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cDependencySTRINGTerminalRuleCall_3_7_1_0 = (RuleCall)cDependencyAssignment_3_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_7_2 = (Keyword)cGroup_3_7.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubstitutedTask:
		//    'task' name=[Task]     '{' (
		//            // shared members (i.e. super members)
		//            inputs += InputData            |
		//            outputs += OutputData         |
		//            params += Param                |
		//            // special members
		//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//            // single members
		//            'description' description=STRING ';'        |
		//            'implementation' primitiveImplementation=STRING ';'    |
		//            'subworkflow' subworkflow=STRING ';'                |
		//            'dependency' dependency=STRING ';'
		//    )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=[Task]     '{' (
		//        // shared members (i.e. super members)
		//        inputs += InputData            |
		//        outputs += OutputData         |
		//        params += Param                |
		//        // special members
		//        ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//        // single members
		//        'description' description=STRING ';'        |
		//        'implementation' primitiveImplementation=STRING ';'    |
		//        'subworkflow' subworkflow=STRING ';'                |
		//        'dependency' dependency=STRING ';'
		//)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=[Task]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Task]
		public CrossReference getNameTaskCrossReference_1_0() { return cNameTaskCrossReference_1_0; }
		
		//ID
		public RuleCall getNameTaskIDTerminalRuleCall_1_0_1() { return cNameTaskIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//           // shared members (i.e. super members)
		//           inputs += InputData            |
		//           outputs += OutputData         |
		//           params += Param                |
		//           // special members
		//           ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//           // single members
		//           'description' description=STRING ';'        |
		//           'implementation' primitiveImplementation=STRING ';'    |
		//           'subworkflow' subworkflow=STRING ';'                |
		//           'dependency' dependency=STRING ';'
		//   )*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//// shared members (i.e. super members)
		//inputs += InputData
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_3_0_0() { return cInputsInputDataParserRuleCall_3_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_3_1() { return cOutputsAssignment_3_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_3_1_0() { return cOutputsOutputDataParserRuleCall_3_1_0; }
		
		//params += Param
		public Assignment getParamsAssignment_3_2() { return cParamsAssignment_3_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_3_2_0() { return cParamsParamParserRuleCall_3_2_0; }
		
		//// special members
		//('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' )
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'metadata'
		public Keyword getMetadataKeyword_3_3_0() { return cMetadataKeyword_3_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_3_1() { return cLeftCurlyBracketKeyword_3_3_1; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_3_3_2() { return cMetadataAssignment_3_3_2; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_3_3_2_0() { return cMetadataMetaDataParserRuleCall_3_3_2_0; }
		
		//(',' metadata += MetaData)
		public Group getGroup_3_3_3() { return cGroup_3_3_3; }
		
		//','
		public Keyword getCommaKeyword_3_3_3_0() { return cCommaKeyword_3_3_3_0; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_3_3_3_1() { return cMetadataAssignment_3_3_3_1; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_3_3_3_1_0() { return cMetadataMetaDataParserRuleCall_3_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3_4() { return cRightCurlyBracketKeyword_3_3_4; }
		
		//// single members
		//'description' description=STRING ';'
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//// single members
		//'description'
		public Keyword getDescriptionKeyword_3_4_0() { return cDescriptionKeyword_3_4_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_4_1() { return cDescriptionAssignment_3_4_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_4_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4_2() { return cSemicolonKeyword_3_4_2; }
		
		//'implementation' primitiveImplementation=STRING ';'
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'implementation'
		public Keyword getImplementationKeyword_3_5_0() { return cImplementationKeyword_3_5_0; }
		
		//primitiveImplementation=STRING
		public Assignment getPrimitiveImplementationAssignment_3_5_1() { return cPrimitiveImplementationAssignment_3_5_1; }
		
		//STRING
		public RuleCall getPrimitiveImplementationSTRINGTerminalRuleCall_3_5_1_0() { return cPrimitiveImplementationSTRINGTerminalRuleCall_3_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_5_2() { return cSemicolonKeyword_3_5_2; }
		
		//'subworkflow' subworkflow=STRING ';'
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'subworkflow'
		public Keyword getSubworkflowKeyword_3_6_0() { return cSubworkflowKeyword_3_6_0; }
		
		//subworkflow=STRING
		public Assignment getSubworkflowAssignment_3_6_1() { return cSubworkflowAssignment_3_6_1; }
		
		//STRING
		public RuleCall getSubworkflowSTRINGTerminalRuleCall_3_6_1_0() { return cSubworkflowSTRINGTerminalRuleCall_3_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_6_2() { return cSemicolonKeyword_3_6_2; }
		
		//'dependency' dependency=STRING ';'
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'dependency'
		public Keyword getDependencyKeyword_3_7_0() { return cDependencyKeyword_3_7_0; }
		
		//dependency=STRING
		public Assignment getDependencyAssignment_3_7_1() { return cDependencyAssignment_3_7_1; }
		
		//STRING
		public RuleCall getDependencySTRINGTerminalRuleCall_3_7_1_0() { return cDependencySTRINGTerminalRuleCall_3_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_7_2() { return cSemicolonKeyword_3_7_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TaskSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.TaskSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Assignment cOutputsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_3_1_0 = (RuleCall)cOutputsAssignment_3_1.eContents().get(0);
		private final Assignment cMetricsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cMetricsMetricParserRuleCall_3_2_0 = (RuleCall)cMetricsAssignment_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_3_0 = (RuleCall)cParametersAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cAlternatives_3.eContents().get(4);
		private final Keyword cImplementationKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cImplementationAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cImplementationSTRINGTerminalRuleCall_3_4_1_0 = (RuleCall)cImplementationAssignment_3_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4_2 = (Keyword)cGroup_3_4.eContents().get(2);
		private final Assignment cDependenciesAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cDependenciesDependencyParserRuleCall_3_5_0 = (RuleCall)cDependenciesAssignment_3_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ## TaskSpecification */
		//TaskSpecification:
		//    'task' name=ID '{'
		//        (
		//            // shared members (i.e. super members)
		//            inputs += InputData            |
		//            outputs += OutputData        |
		//            // dedicated members
		//            metrics += Metric            |
		//            parameters += Parameter     |
		//            'implementation' implementation=STRING ';'    |
		//            dependencies += Dependency
		//        )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=ID '{'
		//    (
		//        // shared members (i.e. super members)
		//        inputs += InputData            |
		//        outputs += OutputData        |
		//        // dedicated members
		//        metrics += Metric            |
		//        parameters += Parameter     |
		//        'implementation' implementation=STRING ';'    |
		//        dependencies += Dependency
		//    )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//    // shared members (i.e. super members)
		//    inputs += InputData            |
		//    outputs += OutputData        |
		//    // dedicated members
		//    metrics += Metric            |
		//    parameters += Parameter     |
		//    'implementation' implementation=STRING ';'    |
		//    dependencies += Dependency
		//)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//// shared members (i.e. super members)
		//inputs += InputData
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_3_0_0() { return cInputsInputDataParserRuleCall_3_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_3_1() { return cOutputsAssignment_3_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_3_1_0() { return cOutputsOutputDataParserRuleCall_3_1_0; }
		
		//// dedicated members
		//metrics += Metric
		public Assignment getMetricsAssignment_3_2() { return cMetricsAssignment_3_2; }
		
		//Metric
		public RuleCall getMetricsMetricParserRuleCall_3_2_0() { return cMetricsMetricParserRuleCall_3_2_0; }
		
		//parameters += Parameter
		public Assignment getParametersAssignment_3_3() { return cParametersAssignment_3_3; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_3_0() { return cParametersParameterParserRuleCall_3_3_0; }
		
		//'implementation' implementation=STRING ';'
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'implementation'
		public Keyword getImplementationKeyword_3_4_0() { return cImplementationKeyword_3_4_0; }
		
		//implementation=STRING
		public Assignment getImplementationAssignment_3_4_1() { return cImplementationAssignment_3_4_1; }
		
		//STRING
		public RuleCall getImplementationSTRINGTerminalRuleCall_3_4_1_0() { return cImplementationSTRINGTerminalRuleCall_3_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4_2() { return cSemicolonKeyword_3_4_2; }
		
		//dependencies += Dependency
		public Assignment getDependenciesAssignment_3_5() { return cDependenciesAssignment_3_5; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_3_5_0() { return cDependenciesDependencyParserRuleCall_3_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Dependency:
		//    'dependency' name=ID value=STRING ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'dependency' name=ID value=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'dependency'
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTypeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTypeParameterTypeParserRuleCall_3_0_1_0 = (RuleCall)cTypeAssignment_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDefaultKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cDefaultValueStringAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cDefaultValueStringSTRINGTerminalRuleCall_3_1_1_0_0 = (RuleCall)cDefaultValueStringAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cDefaultValueIntAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cDefaultValueIntINTTerminalRuleCall_3_1_1_1_0 = (RuleCall)cDefaultValueIntAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_2_0 = (Alternatives)cGroup_3_2.eContents().get(0);
		private final Assignment cRangeValueAssignment_3_2_0_0 = (Assignment)cAlternatives_3_2_0.eContents().get(0);
		private final RuleCall cRangeValueParamValueRangeParserRuleCall_3_2_0_0_0 = (RuleCall)cRangeValueAssignment_3_2_0_0.eContents().get(0);
		private final Assignment cEnumValueAssignment_3_2_0_1 = (Assignment)cAlternatives_3_2_0.eContents().get(1);
		private final RuleCall cEnumValueParamValueEnumParserRuleCall_3_2_0_1_0 = (RuleCall)cEnumValueAssignment_3_2_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cConstraintKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cValueConstraintAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cValueConstraintSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cValueConstraintAssignment_3_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3_2 = (Keyword)cGroup_3_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ### Parameter */
		//Parameter:
		//    'param' name=ID '{'
		//        (
		//            ('type' type=ParameterType ';')?     &
		//            ('default' (defaultValueString=STRING | defaultValueInt=INT) ';')? &
		//            ((rangeValue=ParamValueRange | enumValue= ParamValueEnum) ';')? &
		//            ('constraint' valueConstraint=STRING ';')?
		//        )
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'param' name=ID '{'
		//    (
		//        ('type' type=ParameterType ';')?     &
		//        ('default' (defaultValueString=STRING | defaultValueInt=INT) ';')? &
		//        ((rangeValue=ParamValueRange | enumValue= ParamValueEnum) ';')? &
		//        ('constraint' valueConstraint=STRING ';')?
		//    )
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'param'
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//    ('type' type=ParameterType ';')?     &
		//    ('default' (defaultValueString=STRING | defaultValueInt=INT) ';')? &
		//    ((rangeValue=ParamValueRange | enumValue= ParamValueEnum) ';')? &
		//    ('constraint' valueConstraint=STRING ';')?
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('type' type=ParameterType ';')?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_3_0_0() { return cTypeKeyword_3_0_0; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_3_0_1() { return cTypeAssignment_3_0_1; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_3_0_1_0() { return cTypeParameterTypeParserRuleCall_3_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_2() { return cSemicolonKeyword_3_0_2; }
		
		//('default' (defaultValueString=STRING | defaultValueInt=INT) ';')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'default'
		public Keyword getDefaultKeyword_3_1_0() { return cDefaultKeyword_3_1_0; }
		
		//(defaultValueString=STRING | defaultValueInt=INT)
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//defaultValueString=STRING
		public Assignment getDefaultValueStringAssignment_3_1_1_0() { return cDefaultValueStringAssignment_3_1_1_0; }
		
		//STRING
		public RuleCall getDefaultValueStringSTRINGTerminalRuleCall_3_1_1_0_0() { return cDefaultValueStringSTRINGTerminalRuleCall_3_1_1_0_0; }
		
		//defaultValueInt=INT
		public Assignment getDefaultValueIntAssignment_3_1_1_1() { return cDefaultValueIntAssignment_3_1_1_1; }
		
		//INT
		public RuleCall getDefaultValueIntINTTerminalRuleCall_3_1_1_1_0() { return cDefaultValueIntINTTerminalRuleCall_3_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_2() { return cSemicolonKeyword_3_1_2; }
		
		//((rangeValue=ParamValueRange | enumValue= ParamValueEnum) ';')?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//(rangeValue=ParamValueRange | enumValue= ParamValueEnum)
		public Alternatives getAlternatives_3_2_0() { return cAlternatives_3_2_0; }
		
		//rangeValue=ParamValueRange
		public Assignment getRangeValueAssignment_3_2_0_0() { return cRangeValueAssignment_3_2_0_0; }
		
		//ParamValueRange
		public RuleCall getRangeValueParamValueRangeParserRuleCall_3_2_0_0_0() { return cRangeValueParamValueRangeParserRuleCall_3_2_0_0_0; }
		
		//enumValue= ParamValueEnum
		public Assignment getEnumValueAssignment_3_2_0_1() { return cEnumValueAssignment_3_2_0_1; }
		
		//ParamValueEnum
		public RuleCall getEnumValueParamValueEnumParserRuleCall_3_2_0_1_0() { return cEnumValueParamValueEnumParserRuleCall_3_2_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_1() { return cSemicolonKeyword_3_2_1; }
		
		//('constraint' valueConstraint=STRING ';')?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'constraint'
		public Keyword getConstraintKeyword_3_3_0() { return cConstraintKeyword_3_3_0; }
		
		//valueConstraint=STRING
		public Assignment getValueConstraintAssignment_3_3_1() { return cValueConstraintAssignment_3_3_1; }
		
		//STRING
		public RuleCall getValueConstraintSTRINGTerminalRuleCall_3_3_1_0() { return cValueConstraintSTRINGTerminalRuleCall_3_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3_2() { return cSemicolonKeyword_3_3_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssignedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cAssignedEqualsSignKeyword_2_0_0 = (Keyword)cAssignedAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cValueParamValueParserRuleCall_2_1_0_0 = (RuleCall)cValueAssignment_2_1_0.eContents().get(0);
		private final Assignment cRefAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final CrossReference cRefParamCrossReference_2_1_1_0 = (CrossReference)cRefAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRefParamIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cRefParamCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Param:
		//    'param' name=ID (assigned?='=' (value=ParamValue | ref=[Param|ID]))? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'param' name=ID (assigned?='=' (value=ParamValue | ref=[Param|ID]))? ';'
		public Group getGroup() { return cGroup; }
		
		//'param'
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(assigned?='=' (value=ParamValue | ref=[Param|ID]))?
		public Group getGroup_2() { return cGroup_2; }
		
		//assigned?='='
		public Assignment getAssignedAssignment_2_0() { return cAssignedAssignment_2_0; }
		
		//'='
		public Keyword getAssignedEqualsSignKeyword_2_0_0() { return cAssignedEqualsSignKeyword_2_0_0; }
		
		//(value=ParamValue | ref=[Param|ID])
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//value=ParamValue
		public Assignment getValueAssignment_2_1_0() { return cValueAssignment_2_1_0; }
		
		//ParamValue
		public RuleCall getValueParamValueParserRuleCall_2_1_0_0() { return cValueParamValueParserRuleCall_2_1_0_0; }
		
		//ref=[Param|ID]
		public Assignment getRefAssignment_2_1_1() { return cRefAssignment_2_1_1; }
		
		//[Param|ID]
		public CrossReference getRefParamCrossReference_2_1_1_0() { return cRefParamCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getRefParamIDTerminalRuleCall_2_1_1_0_1() { return cRefParamIDTerminalRuleCall_2_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ParamValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ParamValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRangeValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRangeValueParamValueRangeParserRuleCall_0_0 = (RuleCall)cRangeValueAssignment_0.eContents().get(0);
		private final Assignment cEnumValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumValueParamValueEnumParserRuleCall_1_0 = (RuleCall)cEnumValueAssignment_1.eContents().get(0);
		private final Assignment cPrimitiveValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveValuePrimitiveValueParserRuleCall_2_0 = (RuleCall)cPrimitiveValueAssignment_2.eContents().get(0);
		private final Assignment cListValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cListValueParamValueListParserRuleCall_3_0 = (RuleCall)cListValueAssignment_3.eContents().get(0);
		
		//ParamValue:
		//    rangeValue=ParamValueRange | enumValue=ParamValueEnum | primitiveValue=PrimitiveValue | listValue=ParamValueList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rangeValue=ParamValueRange | enumValue=ParamValueEnum | primitiveValue=PrimitiveValue | listValue=ParamValueList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rangeValue=ParamValueRange
		public Assignment getRangeValueAssignment_0() { return cRangeValueAssignment_0; }
		
		//ParamValueRange
		public RuleCall getRangeValueParamValueRangeParserRuleCall_0_0() { return cRangeValueParamValueRangeParserRuleCall_0_0; }
		
		//enumValue=ParamValueEnum
		public Assignment getEnumValueAssignment_1() { return cEnumValueAssignment_1; }
		
		//ParamValueEnum
		public RuleCall getEnumValueParamValueEnumParserRuleCall_1_0() { return cEnumValueParamValueEnumParserRuleCall_1_0; }
		
		//primitiveValue=PrimitiveValue
		public Assignment getPrimitiveValueAssignment_2() { return cPrimitiveValueAssignment_2; }
		
		//PrimitiveValue
		public RuleCall getPrimitiveValuePrimitiveValueParserRuleCall_2_0() { return cPrimitiveValuePrimitiveValueParserRuleCall_2_0; }
		
		//listValue=ParamValueList
		public Assignment getListValueAssignment_3() { return cListValueAssignment_3; }
		
		//ParamValueList
		public RuleCall getListValueParamValueListParserRuleCall_3_0() { return cListValueParamValueListParserRuleCall_3_0; }
	}
	public class ParamValueRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ParamValueRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartINTTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndINTTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStepAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStepINTTerminalRuleCall_5_1_0 = (RuleCall)cStepAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ParamValueRange:
		//    'range' '('start=INT ',' end=INT (',' step=INT)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'range' '('start=INT ',' end=INT (',' step=INT)?')'
		public Group getGroup() { return cGroup; }
		
		//'range'
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=INT
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_2_0() { return cStartINTTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//end=INT
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_4_0() { return cEndINTTerminalRuleCall_4_0; }
		
		//(',' step=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//step=INT
		public Assignment getStepAssignment_5_1() { return cStepAssignment_5_1; }
		
		//INT
		public RuleCall getStepINTTerminalRuleCall_5_1_0() { return cStepINTTerminalRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ParamValueEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ParamValueEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesPrimitiveValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesPrimitiveValueParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParamValueEnum:
		//    'enum' '(' values+=PrimitiveValue (',' values+=PrimitiveValue)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' '(' values+=PrimitiveValue (',' values+=PrimitiveValue)* ')'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//values+=PrimitiveValue
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//PrimitiveValue
		public RuleCall getValuesPrimitiveValueParserRuleCall_2_0() { return cValuesPrimitiveValueParserRuleCall_2_0; }
		
		//(',' values+=PrimitiveValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//values+=PrimitiveValue
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//PrimitiveValue
		public RuleCall getValuesPrimitiveValueParserRuleCall_3_1_0() { return cValuesPrimitiveValueParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParamValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ParamValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesPrimitiveValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesPrimitiveValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParamValueList:
		//    '[' values+=PrimitiveValue (',' values+=PrimitiveValue)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' values+=PrimitiveValue (',' values+=PrimitiveValue)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//values+=PrimitiveValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//PrimitiveValue
		public RuleCall getValuesPrimitiveValueParserRuleCall_1_0() { return cValuesPrimitiveValueParserRuleCall_1_0; }
		
		//(',' values+=PrimitiveValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=PrimitiveValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//PrimitiveValue
		public RuleCall getValuesPrimitiveValueParserRuleCall_2_1_0() { return cValuesPrimitiveValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class PrimitiveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.PrimitiveValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveValue:
		//    INT | STRING | FLOAT | BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | STRING | FLOAT | BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2() { return cFLOATTerminalRuleCall_2; }
		
		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_3() { return cBOOLEANTerminalRuleCall_3; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* ### ParameterType */
		//ParameterType:
		//    Structure | PrimitiveType | Array
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Structure | PrimitiveType | Array
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Structure
		public RuleCall getStructureParserRuleCall_0() { return cStructureParserRuleCall_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_1() { return cPrimitiveTypeParserRuleCall_1; }
		
		//Array
		public RuleCall getArrayParserRuleCall_2() { return cArrayParserRuleCall_2; }
	}
	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Structure:
		//    'struct' name=ID '{'
		//        fields += Field ';'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID '{'
		//    fields += Field ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields += Field
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeParameterTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Field:
		//    name=ID ('as' type=ParameterType)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('as' type=ParameterType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('as' type=ParameterType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_1_1_0() { return cTypeParameterTypeParserRuleCall_1_1_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeParameterTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		
		//Array:
		//    name=ID '['length=INT']' ('as' type=ParameterType)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '['length=INT']' ('as' type=ParameterType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//('as' type=ParameterType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'as'
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_4_1_0() { return cTypeParameterTypeParserRuleCall_4_1_0; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.PrimitiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIntegerKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBooleanKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cStringKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cBlobKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//PrimitiveType returns ParameterType:
		//    {PrimitiveType} ('Integer' | 'Boolean' | 'String' | 'Blob')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveType} ('Integer' | 'Boolean' | 'String' | 'Blob')
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveType}
		public Action getPrimitiveTypeAction_0() { return cPrimitiveTypeAction_0; }
		
		//('Integer' | 'Boolean' | 'String' | 'Blob')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1_0() { return cIntegerKeyword_1_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1_1() { return cBooleanKeyword_1_1; }
		
		//'String'
		public Keyword getStringKeyword_1_2() { return cStringKeyword_1_2; }
		
		//'Blob'
		public Keyword getBlobKeyword_1_3() { return cBlobKeyword_1_3; }
	}
	public class MetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Metric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cTypeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTypeParameterTypeParserRuleCall_3_0_1_0 = (RuleCall)cTypeAssignment_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cKindKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cKindAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cKindMetricKindEnumRuleCall_3_1_1_0 = (RuleCall)cKindAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ### Metric */
		//Metric:
		//    'metric' name=ID '{'
		//        (
		//            ('type' type=ParameterType ';')? &
		//            ('kind' kind=MetricKind ';')?
		//        )
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'metric' name=ID '{'
		//    (
		//        ('type' type=ParameterType ';')? &
		//        ('kind' kind=MetricKind ';')?
		//    )
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'metric'
		public Keyword getMetricKeyword_0() { return cMetricKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//    ('type' type=ParameterType ';')? &
		//    ('kind' kind=MetricKind ';')?
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('type' type=ParameterType ';')?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_3_0_0() { return cTypeKeyword_3_0_0; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_3_0_1() { return cTypeAssignment_3_0_1; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_3_0_1_0() { return cTypeParameterTypeParserRuleCall_3_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_2() { return cSemicolonKeyword_3_0_2; }
		
		//('kind' kind=MetricKind ';')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'kind'
		public Keyword getKindKeyword_3_1_0() { return cKindKeyword_3_1_0; }
		
		//kind=MetricKind
		public Assignment getKindAssignment_3_1_1() { return cKindAssignment_3_1_1; }
		
		//MetricKind
		public RuleCall getKindMetricKindEnumRuleCall_3_1_1_0() { return cKindMetricKindEnumRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_2() { return cSemicolonKeyword_3_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExperimentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Experiment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIntentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntentIDTerminalRuleCall_3_1_0 = (RuleCall)cIntentAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStepsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStepsExperimentStepParserRuleCall_4_0_0 = (RuleCall)cStepsAssignment_4_0.eContents().get(0);
		private final Assignment cControlAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cControlControlParserRuleCall_4_1_0 = (RuleCall)cControlAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* ## Experiment */
		//Experiment:
		//    'experiment' name=ID '{'
		//        ('intent' intent=ID ';')?
		//        (
		//            steps += ExperimentStep     |
		//            control = Control
		//        )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'experiment' name=ID '{'
		//    ('intent' intent=ID ';')?
		//    (
		//        steps += ExperimentStep     |
		//        control = Control
		//    )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'experiment'
		public Keyword getExperimentKeyword_0() { return cExperimentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('intent' intent=ID ';')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'intent'
		public Keyword getIntentKeyword_3_0() { return cIntentKeyword_3_0; }
		
		//intent=ID
		public Assignment getIntentAssignment_3_1() { return cIntentAssignment_3_1; }
		
		//ID
		public RuleCall getIntentIDTerminalRuleCall_3_1_0() { return cIntentIDTerminalRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
		
		//(
		//    steps += ExperimentStep     |
		//    control = Control
		//)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//steps += ExperimentStep
		public Assignment getStepsAssignment_4_0() { return cStepsAssignment_4_0; }
		
		//ExperimentStep
		public RuleCall getStepsExperimentStepParserRuleCall_4_0_0() { return cStepsExperimentStepParserRuleCall_4_0_0; }
		
		//control = Control
		public Assignment getControlAssignment_4_1() { return cControlAssignment_4_1; }
		
		//Control
		public RuleCall getControlControlParserRuleCall_4_1_0() { return cControlControlParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Control");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cControlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cFlowsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cFlowsExperimentFlowParserRuleCall_3_0_0 = (RuleCall)cFlowsAssignment_3_0.eContents().get(0);
		private final Assignment cNotImplementedAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cNotImplementedFullStopFullStopFullStopKeyword_3_1_0 = (Keyword)cNotImplementedAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Control:
		//        {Control}'control' '{'
		//        (
		//            flows += ExperimentFlow*
		//            |
		//            (notImplemented = '...')
		//        )
		//        '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Control}'control' '{'
		//(
		//    flows += ExperimentFlow*
		//    |
		//    (notImplemented = '...')
		//)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Control}
		public Action getControlAction_0() { return cControlAction_0; }
		
		//'control'
		public Keyword getControlKeyword_1() { return cControlKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//    flows += ExperimentFlow*
		//    |
		//    (notImplemented = '...')
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//flows += ExperimentFlow*
		public Assignment getFlowsAssignment_3_0() { return cFlowsAssignment_3_0; }
		
		//ExperimentFlow
		public RuleCall getFlowsExperimentFlowParserRuleCall_3_0_0() { return cFlowsExperimentFlowParserRuleCall_3_0_0; }
		
		//(notImplemented = '...')
		public Assignment getNotImplementedAssignment_3_1() { return cNotImplementedAssignment_3_1; }
		
		//'...'
		public Keyword getNotImplementedFullStopFullStopFullStopKeyword_3_1_0() { return cNotImplementedFullStopFullStopFullStopKeyword_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExperimentStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExperimentTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInteractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExperimentSpaceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* ## ExperimentStep */
		//ExperimentStep:
		//    ExperimentTask | Interaction | ExperimentSpace
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExperimentTask | Interaction | ExperimentSpace
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExperimentTask
		public RuleCall getExperimentTaskParserRuleCall_0() { return cExperimentTaskParserRuleCall_0; }
		
		//Interaction
		public RuleCall getInteractionParserRuleCall_1() { return cInteractionParserRuleCall_1; }
		
		//ExperimentSpace
		public RuleCall getExperimentSpaceParserRuleCall_2() { return cExperimentSpaceParserRuleCall_2; }
	}
	public class ExperimentTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentTask");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTaskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cAbstractAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cAbstractSemicolonKeyword_0_2_0 = (Keyword)cAbstractAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTaskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cConfiguredAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cConfiguredLeftCurlyBracketKeyword_1_2_0 = (Keyword)cConfiguredAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cInputsAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_1_3_0_0 = (RuleCall)cInputsAssignment_1_3_0.eContents().get(0);
		private final Assignment cOutputsAssignment_1_3_1 = (Assignment)cAlternatives_1_3.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_1_3_1_0 = (RuleCall)cOutputsAssignment_1_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_3_2 = (Assignment)cAlternatives_1_3.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_1_3_2_0 = (RuleCall)cParamsAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_3_3 = (Group)cAlternatives_1_3.eContents().get(3);
		private final Keyword cMetadataKeyword_1_3_3_0 = (Keyword)cGroup_1_3_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3_3_1 = (Keyword)cGroup_1_3_3.eContents().get(1);
		private final Assignment cMetadataAssignment_1_3_3_2 = (Assignment)cGroup_1_3_3.eContents().get(2);
		private final RuleCall cMetadataMetaDataParserRuleCall_1_3_3_2_0 = (RuleCall)cMetadataAssignment_1_3_3_2.eContents().get(0);
		private final Group cGroup_1_3_3_3 = (Group)cGroup_1_3_3.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_3_3_0 = (Keyword)cGroup_1_3_3_3.eContents().get(0);
		private final Assignment cMetadataAssignment_1_3_3_3_1 = (Assignment)cGroup_1_3_3_3.eContents().get(1);
		private final RuleCall cMetadataMetaDataParserRuleCall_1_3_3_3_1_0 = (RuleCall)cMetadataAssignment_1_3_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_3_4 = (Keyword)cGroup_1_3_3.eContents().get(4);
		private final Group cGroup_1_3_4 = (Group)cAlternatives_1_3.eContents().get(4);
		private final Keyword cDescriptionKeyword_1_3_4_0 = (Keyword)cGroup_1_3_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_3_4_1 = (Assignment)cGroup_1_3_4.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_3_4_1_0 = (RuleCall)cDescriptionAssignment_1_3_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_4_2 = (Keyword)cGroup_1_3_4.eContents().get(2);
		private final Group cGroup_1_3_5 = (Group)cAlternatives_1_3.eContents().get(5);
		private final Keyword cImplementationKeyword_1_3_5_0 = (Keyword)cGroup_1_3_5.eContents().get(0);
		private final Assignment cPrimitiveImplementationAssignment_1_3_5_1 = (Assignment)cGroup_1_3_5.eContents().get(1);
		private final RuleCall cPrimitiveImplementationSTRINGTerminalRuleCall_1_3_5_1_0 = (RuleCall)cPrimitiveImplementationAssignment_1_3_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_5_2 = (Keyword)cGroup_1_3_5.eContents().get(2);
		private final Group cGroup_1_3_6 = (Group)cAlternatives_1_3.eContents().get(6);
		private final Keyword cSubworkflowKeyword_1_3_6_0 = (Keyword)cGroup_1_3_6.eContents().get(0);
		private final Assignment cSubworkflowAssignment_1_3_6_1 = (Assignment)cGroup_1_3_6.eContents().get(1);
		private final RuleCall cSubworkflowSTRINGTerminalRuleCall_1_3_6_1_0 = (RuleCall)cSubworkflowAssignment_1_3_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_6_2 = (Keyword)cGroup_1_3_6.eContents().get(2);
		private final Group cGroup_1_3_7 = (Group)cAlternatives_1_3.eContents().get(7);
		private final Keyword cDependencyKeyword_1_3_7_0 = (Keyword)cGroup_1_3_7.eContents().get(0);
		private final Assignment cDependencyAssignment_1_3_7_1 = (Assignment)cGroup_1_3_7.eContents().get(1);
		private final RuleCall cDependencySTRINGTerminalRuleCall_1_3_7_1_0 = (RuleCall)cDependencyAssignment_1_3_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_7_2 = (Keyword)cGroup_1_3_7.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		///* ### ExperimentTask */
		//ExperimentTask:
		//     ('task' name=ID abstract?=';') |
		//     ('task' name=ID configured?= '{' (
		//            // shared members (i.e. super members)
		//            inputs += InputData            |
		//            outputs += OutputData         |
		//            params += Param                |
		//            // special members
		//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//            // single members
		//            'description' description=STRING ';'        |
		//            'implementation' primitiveImplementation=STRING ';'    |
		//            'subworkflow' subworkflow=STRING ';'                |
		//            'dependency' dependency=STRING ';'
		//    )*
		//    '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// ('task' name=ID abstract?=';') |
		// ('task' name=ID configured?= '{' (
		//        // shared members (i.e. super members)
		//        inputs += InputData            |
		//        outputs += OutputData         |
		//        params += Param                |
		//        // special members
		//        ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//        // single members
		//        'description' description=STRING ';'        |
		//        'implementation' primitiveImplementation=STRING ';'    |
		//        'subworkflow' subworkflow=STRING ';'                |
		//        'dependency' dependency=STRING ';'
		//)*
		//'}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('task' name=ID abstract?=';')
		public Group getGroup_0() { return cGroup_0; }
		
		//'task'
		public Keyword getTaskKeyword_0_0() { return cTaskKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//abstract?=';'
		public Assignment getAbstractAssignment_0_2() { return cAbstractAssignment_0_2; }
		
		//';'
		public Keyword getAbstractSemicolonKeyword_0_2_0() { return cAbstractSemicolonKeyword_0_2_0; }
		
		// ('task' name=ID configured?= '{' (
		//        // shared members (i.e. super members)
		//        inputs += InputData            |
		//        outputs += OutputData         |
		//        params += Param                |
		//        // special members
		//        ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//        // single members
		//        'description' description=STRING ';'        |
		//        'implementation' primitiveImplementation=STRING ';'    |
		//        'subworkflow' subworkflow=STRING ';'                |
		//        'dependency' dependency=STRING ';'
		//)*
		//'}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'task'
		public Keyword getTaskKeyword_1_0() { return cTaskKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//configured?= '{'
		public Assignment getConfiguredAssignment_1_2() { return cConfiguredAssignment_1_2; }
		
		//'{'
		public Keyword getConfiguredLeftCurlyBracketKeyword_1_2_0() { return cConfiguredLeftCurlyBracketKeyword_1_2_0; }
		
		//(
		//           // shared members (i.e. super members)
		//           inputs += InputData            |
		//           outputs += OutputData         |
		//           params += Param                |
		//           // special members
		//           ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//           // single members
		//           'description' description=STRING ';'        |
		//           'implementation' primitiveImplementation=STRING ';'    |
		//           'subworkflow' subworkflow=STRING ';'                |
		//           'dependency' dependency=STRING ';'
		//   )*
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//// shared members (i.e. super members)
		//inputs += InputData
		public Assignment getInputsAssignment_1_3_0() { return cInputsAssignment_1_3_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_1_3_0_0() { return cInputsInputDataParserRuleCall_1_3_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_1_3_1() { return cOutputsAssignment_1_3_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_1_3_1_0() { return cOutputsOutputDataParserRuleCall_1_3_1_0; }
		
		//params += Param
		public Assignment getParamsAssignment_1_3_2() { return cParamsAssignment_1_3_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_3_2_0() { return cParamsParamParserRuleCall_1_3_2_0; }
		
		//// special members
		//('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' )
		public Group getGroup_1_3_3() { return cGroup_1_3_3; }
		
		//'metadata'
		public Keyword getMetadataKeyword_1_3_3_0() { return cMetadataKeyword_1_3_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3_3_1() { return cLeftCurlyBracketKeyword_1_3_3_1; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_1_3_3_2() { return cMetadataAssignment_1_3_3_2; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_1_3_3_2_0() { return cMetadataMetaDataParserRuleCall_1_3_3_2_0; }
		
		//(',' metadata += MetaData)
		public Group getGroup_1_3_3_3() { return cGroup_1_3_3_3; }
		
		//','
		public Keyword getCommaKeyword_1_3_3_3_0() { return cCommaKeyword_1_3_3_3_0; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_1_3_3_3_1() { return cMetadataAssignment_1_3_3_3_1; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_1_3_3_3_1_0() { return cMetadataMetaDataParserRuleCall_1_3_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3_3_4() { return cRightCurlyBracketKeyword_1_3_3_4; }
		
		//// single members
		//'description' description=STRING ';'
		public Group getGroup_1_3_4() { return cGroup_1_3_4; }
		
		//// single members
		//'description'
		public Keyword getDescriptionKeyword_1_3_4_0() { return cDescriptionKeyword_1_3_4_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1_3_4_1() { return cDescriptionAssignment_1_3_4_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_3_4_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_3_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3_4_2() { return cSemicolonKeyword_1_3_4_2; }
		
		//'implementation' primitiveImplementation=STRING ';'
		public Group getGroup_1_3_5() { return cGroup_1_3_5; }
		
		//'implementation'
		public Keyword getImplementationKeyword_1_3_5_0() { return cImplementationKeyword_1_3_5_0; }
		
		//primitiveImplementation=STRING
		public Assignment getPrimitiveImplementationAssignment_1_3_5_1() { return cPrimitiveImplementationAssignment_1_3_5_1; }
		
		//STRING
		public RuleCall getPrimitiveImplementationSTRINGTerminalRuleCall_1_3_5_1_0() { return cPrimitiveImplementationSTRINGTerminalRuleCall_1_3_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3_5_2() { return cSemicolonKeyword_1_3_5_2; }
		
		//'subworkflow' subworkflow=STRING ';'
		public Group getGroup_1_3_6() { return cGroup_1_3_6; }
		
		//'subworkflow'
		public Keyword getSubworkflowKeyword_1_3_6_0() { return cSubworkflowKeyword_1_3_6_0; }
		
		//subworkflow=STRING
		public Assignment getSubworkflowAssignment_1_3_6_1() { return cSubworkflowAssignment_1_3_6_1; }
		
		//STRING
		public RuleCall getSubworkflowSTRINGTerminalRuleCall_1_3_6_1_0() { return cSubworkflowSTRINGTerminalRuleCall_1_3_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3_6_2() { return cSemicolonKeyword_1_3_6_2; }
		
		//'dependency' dependency=STRING ';'
		public Group getGroup_1_3_7() { return cGroup_1_3_7; }
		
		//'dependency'
		public Keyword getDependencyKeyword_1_3_7_0() { return cDependencyKeyword_1_3_7_0; }
		
		//dependency=STRING
		public Assignment getDependencyAssignment_1_3_7_1() { return cDependencyAssignment_1_3_7_1; }
		
		//STRING
		public RuleCall getDependencySTRINGTerminalRuleCall_1_3_7_1_0() { return cDependencySTRINGTerminalRuleCall_1_3_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_3_7_2() { return cSemicolonKeyword_1_3_7_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}
	public class InteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Interaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* ### Interaction */
		//Interaction:
		//    'interaction' name=ID '{'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'interaction' name=ID '{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'interaction'
		public Keyword getInteractionKeyword_0() { return cInteractionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExperimentSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssembledWorkflowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAssembledWorkflowWorkflowCrossReference_3_0 = (CrossReference)cAssembledWorkflowAssignment_3.eContents().get(0);
		private final RuleCall cAssembledWorkflowWorkflowIDTerminalRuleCall_3_0_1 = (RuleCall)cAssembledWorkflowWorkflowCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cStrategyKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cStrategyAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cStrategyIDTerminalRuleCall_5_0_1_0 = (RuleCall)cStrategyAssignment_5_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Assignment cParamsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_5_1_0 = (RuleCall)cParamsAssignment_5_1.eContents().get(0);
		private final Assignment cActionsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_5_2_0 = (RuleCall)cActionsAssignment_5_2.eContents().get(0);
		private final Assignment cAttributesAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_5_3_0 = (RuleCall)cAttributesAssignment_5_3.eContents().get(0);
		private final Assignment cTaskConfigurationsAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cTaskConfigurationsTaskConfigurationParserRuleCall_5_4_0 = (RuleCall)cTaskConfigurationsAssignment_5_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///* ### Space */
		//ExperimentSpace:
		//    'space' name=ID 'of' assembledWorkflow=[Workflow] '{'
		//            (
		//                'strategy' strategy=ID ';'     |
		//                params += Param                |
		//                actions += Action            |
		//                attributes += Attribute        |
		//                taskConfigurations += TaskConfiguration
		//            )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'space' name=ID 'of' assembledWorkflow=[Workflow] '{'
		//        (
		//            'strategy' strategy=ID ';'     |
		//            params += Param                |
		//            actions += Action            |
		//            attributes += Attribute        |
		//            taskConfigurations += TaskConfiguration
		//        )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'space'
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//assembledWorkflow=[Workflow]
		public Assignment getAssembledWorkflowAssignment_3() { return cAssembledWorkflowAssignment_3; }
		
		//[Workflow]
		public CrossReference getAssembledWorkflowWorkflowCrossReference_3_0() { return cAssembledWorkflowWorkflowCrossReference_3_0; }
		
		//ID
		public RuleCall getAssembledWorkflowWorkflowIDTerminalRuleCall_3_0_1() { return cAssembledWorkflowWorkflowIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(
		//    'strategy' strategy=ID ';'     |
		//    params += Param                |
		//    actions += Action            |
		//    attributes += Attribute        |
		//    taskConfigurations += TaskConfiguration
		//)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'strategy' strategy=ID ';'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'strategy'
		public Keyword getStrategyKeyword_5_0_0() { return cStrategyKeyword_5_0_0; }
		
		//strategy=ID
		public Assignment getStrategyAssignment_5_0_1() { return cStrategyAssignment_5_0_1; }
		
		//ID
		public RuleCall getStrategyIDTerminalRuleCall_5_0_1_0() { return cStrategyIDTerminalRuleCall_5_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0_2() { return cSemicolonKeyword_5_0_2; }
		
		//params += Param
		public Assignment getParamsAssignment_5_1() { return cParamsAssignment_5_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_5_1_0() { return cParamsParamParserRuleCall_5_1_0; }
		
		//actions += Action
		public Assignment getActionsAssignment_5_2() { return cActionsAssignment_5_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_2_0() { return cActionsActionParserRuleCall_5_2_0; }
		
		//attributes += Attribute
		public Assignment getAttributesAssignment_5_3() { return cAttributesAssignment_5_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_3_0() { return cAttributesAttributeParserRuleCall_5_3_0; }
		
		//taskConfigurations += TaskConfiguration
		public Assignment getTaskConfigurationsAssignment_5_4() { return cTaskConfigurationsAssignment_5_4; }
		
		//TaskConfiguration
		public RuleCall getTaskConfigurationsTaskConfigurationParserRuleCall_5_4_0() { return cTaskConfigurationsTaskConfigurationParserRuleCall_5_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TaskConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.TaskConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cConfiguredAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cConfiguredLeftCurlyBracketKeyword_2_0_0_0 = (Keyword)cConfiguredAssignment_2_0_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_1 = (Alternatives)cGroup_2_0.eContents().get(1);
		private final Assignment cInputsAssignment_2_0_1_0 = (Assignment)cAlternatives_2_0_1.eContents().get(0);
		private final RuleCall cInputsInputDataParserRuleCall_2_0_1_0_0 = (RuleCall)cInputsAssignment_2_0_1_0.eContents().get(0);
		private final Assignment cOutputsAssignment_2_0_1_1 = (Assignment)cAlternatives_2_0_1.eContents().get(1);
		private final RuleCall cOutputsOutputDataParserRuleCall_2_0_1_1_0 = (RuleCall)cOutputsAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_0_1_2 = (Assignment)cAlternatives_2_0_1.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_2_0_1_2_0 = (RuleCall)cParamsAssignment_2_0_1_2.eContents().get(0);
		private final Group cGroup_2_0_1_3 = (Group)cAlternatives_2_0_1.eContents().get(3);
		private final Keyword cMetadataKeyword_2_0_1_3_0 = (Keyword)cGroup_2_0_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_1_3_1 = (Keyword)cGroup_2_0_1_3.eContents().get(1);
		private final Assignment cMetadataAssignment_2_0_1_3_2 = (Assignment)cGroup_2_0_1_3.eContents().get(2);
		private final RuleCall cMetadataMetaDataParserRuleCall_2_0_1_3_2_0 = (RuleCall)cMetadataAssignment_2_0_1_3_2.eContents().get(0);
		private final Group cGroup_2_0_1_3_3 = (Group)cGroup_2_0_1_3.eContents().get(3);
		private final Keyword cCommaKeyword_2_0_1_3_3_0 = (Keyword)cGroup_2_0_1_3_3.eContents().get(0);
		private final Assignment cMetadataAssignment_2_0_1_3_3_1 = (Assignment)cGroup_2_0_1_3_3.eContents().get(1);
		private final RuleCall cMetadataMetaDataParserRuleCall_2_0_1_3_3_1_0 = (RuleCall)cMetadataAssignment_2_0_1_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_1_3_4 = (Keyword)cGroup_2_0_1_3.eContents().get(4);
		private final Group cGroup_2_0_1_4 = (Group)cAlternatives_2_0_1.eContents().get(4);
		private final Keyword cDescriptionKeyword_2_0_1_4_0 = (Keyword)cGroup_2_0_1_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_0_1_4_1 = (Assignment)cGroup_2_0_1_4.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0_1_4_1_0 = (RuleCall)cDescriptionAssignment_2_0_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_4_2 = (Keyword)cGroup_2_0_1_4.eContents().get(2);
		private final Group cGroup_2_0_1_5 = (Group)cAlternatives_2_0_1.eContents().get(5);
		private final Keyword cImplementationKeyword_2_0_1_5_0 = (Keyword)cGroup_2_0_1_5.eContents().get(0);
		private final Assignment cPrimitiveImplementationAssignment_2_0_1_5_1 = (Assignment)cGroup_2_0_1_5.eContents().get(1);
		private final RuleCall cPrimitiveImplementationSTRINGTerminalRuleCall_2_0_1_5_1_0 = (RuleCall)cPrimitiveImplementationAssignment_2_0_1_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_5_2 = (Keyword)cGroup_2_0_1_5.eContents().get(2);
		private final Group cGroup_2_0_1_6 = (Group)cAlternatives_2_0_1.eContents().get(6);
		private final Keyword cSubworkflowKeyword_2_0_1_6_0 = (Keyword)cGroup_2_0_1_6.eContents().get(0);
		private final Assignment cSubworkflowAssignment_2_0_1_6_1 = (Assignment)cGroup_2_0_1_6.eContents().get(1);
		private final RuleCall cSubworkflowSTRINGTerminalRuleCall_2_0_1_6_1_0 = (RuleCall)cSubworkflowAssignment_2_0_1_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_6_2 = (Keyword)cGroup_2_0_1_6.eContents().get(2);
		private final Group cGroup_2_0_1_7 = (Group)cAlternatives_2_0_1.eContents().get(7);
		private final Keyword cDependencyKeyword_2_0_1_7_0 = (Keyword)cGroup_2_0_1_7.eContents().get(0);
		private final Assignment cDependencyAssignment_2_0_1_7_1 = (Assignment)cGroup_2_0_1_7.eContents().get(1);
		private final RuleCall cDependencySTRINGTerminalRuleCall_2_0_1_7_1_0 = (RuleCall)cDependencyAssignment_2_0_1_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_7_2 = (Keyword)cGroup_2_0_1_7.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cAbstracAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cAbstracSemicolonKeyword_2_1_0 = (Keyword)cAbstracAssignment_2_1.eContents().get(0);
		
		//TaskConfiguration:
		//    'task' task=[Task] ((configured?= '{'
		//        (        inputs += InputData            |
		//                outputs += OutputData         |
		//                params += Param                |
		//                // special members
		//                ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//                // single members
		//                'description' description=STRING ';'        |
		//                'implementation' primitiveImplementation=STRING ';'    |
		//                'subworkflow' subworkflow=STRING ';'                |
		//                'dependency' dependency=STRING ';'
		//            )*
		//        '}'
		//        ) | abstrac?=';')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' task=[Task] ((configured?= '{'
		//    (        inputs += InputData            |
		//            outputs += OutputData         |
		//            params += Param                |
		//            // special members
		//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//            // single members
		//            'description' description=STRING ';'        |
		//            'implementation' primitiveImplementation=STRING ';'    |
		//            'subworkflow' subworkflow=STRING ';'                |
		//            'dependency' dependency=STRING ';'
		//        )*
		//    '}'
		//    ) | abstrac?=';')
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
		
		//((configured?= '{'
		//       (        inputs += InputData            |
		//               outputs += OutputData         |
		//               params += Param                |
		//               // special members
		//               ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//               // single members
		//               'description' description=STRING ';'        |
		//               'implementation' primitiveImplementation=STRING ';'    |
		//               'subworkflow' subworkflow=STRING ';'                |
		//               'dependency' dependency=STRING ';'
		//           )*
		//       '}'
		//       ) | abstrac?=';')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(configured?= '{'
		//        (        inputs += InputData            |
		//                outputs += OutputData         |
		//                params += Param                |
		//                // special members
		//                ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//                // single members
		//                'description' description=STRING ';'        |
		//                'implementation' primitiveImplementation=STRING ';'    |
		//                'subworkflow' subworkflow=STRING ';'                |
		//                'dependency' dependency=STRING ';'
		//            )*
		//        '}'
		//        )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//configured?= '{'
		public Assignment getConfiguredAssignment_2_0_0() { return cConfiguredAssignment_2_0_0; }
		
		//'{'
		public Keyword getConfiguredLeftCurlyBracketKeyword_2_0_0_0() { return cConfiguredLeftCurlyBracketKeyword_2_0_0_0; }
		
		//(        inputs += InputData            |
		//        outputs += OutputData         |
		//        params += Param                |
		//        // special members
		//        ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
		//        // single members
		//        'description' description=STRING ';'        |
		//        'implementation' primitiveImplementation=STRING ';'    |
		//        'subworkflow' subworkflow=STRING ';'                |
		//        'dependency' dependency=STRING ';'
		//    )*
		public Alternatives getAlternatives_2_0_1() { return cAlternatives_2_0_1; }
		
		//inputs += InputData
		public Assignment getInputsAssignment_2_0_1_0() { return cInputsAssignment_2_0_1_0; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_2_0_1_0_0() { return cInputsInputDataParserRuleCall_2_0_1_0_0; }
		
		//outputs += OutputData
		public Assignment getOutputsAssignment_2_0_1_1() { return cOutputsAssignment_2_0_1_1; }
		
		//OutputData
		public RuleCall getOutputsOutputDataParserRuleCall_2_0_1_1_0() { return cOutputsOutputDataParserRuleCall_2_0_1_1_0; }
		
		//params += Param
		public Assignment getParamsAssignment_2_0_1_2() { return cParamsAssignment_2_0_1_2; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_2_0_1_2_0() { return cParamsParamParserRuleCall_2_0_1_2_0; }
		
		//// special members
		//('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' )
		public Group getGroup_2_0_1_3() { return cGroup_2_0_1_3; }
		
		//'metadata'
		public Keyword getMetadataKeyword_2_0_1_3_0() { return cMetadataKeyword_2_0_1_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0_1_3_1() { return cLeftCurlyBracketKeyword_2_0_1_3_1; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_2_0_1_3_2() { return cMetadataAssignment_2_0_1_3_2; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_2_0_1_3_2_0() { return cMetadataMetaDataParserRuleCall_2_0_1_3_2_0; }
		
		//(',' metadata += MetaData)
		public Group getGroup_2_0_1_3_3() { return cGroup_2_0_1_3_3; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_3_3_0() { return cCommaKeyword_2_0_1_3_3_0; }
		
		//metadata += MetaData
		public Assignment getMetadataAssignment_2_0_1_3_3_1() { return cMetadataAssignment_2_0_1_3_3_1; }
		
		//MetaData
		public RuleCall getMetadataMetaDataParserRuleCall_2_0_1_3_3_1_0() { return cMetadataMetaDataParserRuleCall_2_0_1_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_0_1_3_4() { return cRightCurlyBracketKeyword_2_0_1_3_4; }
		
		//// single members
		//'description' description=STRING ';'
		public Group getGroup_2_0_1_4() { return cGroup_2_0_1_4; }
		
		//// single members
		//'description'
		public Keyword getDescriptionKeyword_2_0_1_4_0() { return cDescriptionKeyword_2_0_1_4_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_0_1_4_1() { return cDescriptionAssignment_2_0_1_4_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0_1_4_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_0_1_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_1_4_2() { return cSemicolonKeyword_2_0_1_4_2; }
		
		//'implementation' primitiveImplementation=STRING ';'
		public Group getGroup_2_0_1_5() { return cGroup_2_0_1_5; }
		
		//'implementation'
		public Keyword getImplementationKeyword_2_0_1_5_0() { return cImplementationKeyword_2_0_1_5_0; }
		
		//primitiveImplementation=STRING
		public Assignment getPrimitiveImplementationAssignment_2_0_1_5_1() { return cPrimitiveImplementationAssignment_2_0_1_5_1; }
		
		//STRING
		public RuleCall getPrimitiveImplementationSTRINGTerminalRuleCall_2_0_1_5_1_0() { return cPrimitiveImplementationSTRINGTerminalRuleCall_2_0_1_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_1_5_2() { return cSemicolonKeyword_2_0_1_5_2; }
		
		//'subworkflow' subworkflow=STRING ';'
		public Group getGroup_2_0_1_6() { return cGroup_2_0_1_6; }
		
		//'subworkflow'
		public Keyword getSubworkflowKeyword_2_0_1_6_0() { return cSubworkflowKeyword_2_0_1_6_0; }
		
		//subworkflow=STRING
		public Assignment getSubworkflowAssignment_2_0_1_6_1() { return cSubworkflowAssignment_2_0_1_6_1; }
		
		//STRING
		public RuleCall getSubworkflowSTRINGTerminalRuleCall_2_0_1_6_1_0() { return cSubworkflowSTRINGTerminalRuleCall_2_0_1_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_1_6_2() { return cSemicolonKeyword_2_0_1_6_2; }
		
		//'dependency' dependency=STRING ';'
		public Group getGroup_2_0_1_7() { return cGroup_2_0_1_7; }
		
		//'dependency'
		public Keyword getDependencyKeyword_2_0_1_7_0() { return cDependencyKeyword_2_0_1_7_0; }
		
		//dependency=STRING
		public Assignment getDependencyAssignment_2_0_1_7_1() { return cDependencyAssignment_2_0_1_7_1; }
		
		//STRING
		public RuleCall getDependencySTRINGTerminalRuleCall_2_0_1_7_1_0() { return cDependencySTRINGTerminalRuleCall_2_0_1_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_1_7_2() { return cSemicolonKeyword_2_0_1_7_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_0_2() { return cRightCurlyBracketKeyword_2_0_2; }
		
		//abstrac?=';'
		public Assignment getAbstracAssignment_2_1() { return cAbstracAssignment_2_1; }
		
		//';'
		public Keyword getAbstracSemicolonKeyword_2_1_0() { return cAbstracSemicolonKeyword_2_1_0; }
	}
	public class ActionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ActionArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//ActionArgument:
		//    string=STRING | id=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//string=STRING | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionNameIDTerminalRuleCall_1_0 = (RuleCall)cActionNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsActionArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsActionArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action:
		//    ('action' actionName=ID '(' (arguments+=ActionArgument (',' arguments+=ActionArgument)*)? ')' ';')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('action' actionName=ID '(' (arguments+=ActionArgument (',' arguments+=ActionArgument)*)? ')' ';')
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//actionName=ID
		public Assignment getActionNameAssignment_1() { return cActionNameAssignment_1; }
		
		//ID
		public RuleCall getActionNameIDTerminalRuleCall_1_0() { return cActionNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=ActionArgument (',' arguments+=ActionArgument)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=ActionArgument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//ActionArgument
		public RuleCall getArgumentsActionArgumentParserRuleCall_3_0_0() { return cArgumentsActionArgumentParserRuleCall_3_0_0; }
		
		//(',' arguments+=ActionArgument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=ActionArgument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//ActionArgument
		public RuleCall getArgumentsActionArgumentParserRuleCall_3_1_1_0() { return cArgumentsActionArgumentParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeValueParamValueParserRuleCall_2_0 = (RuleCall)cAttributeValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribute:
		//    name=ID '=' attributeValue=ParamValue ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' attributeValue=ParamValue ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//attributeValue=ParamValue
		public Assignment getAttributeValueAssignment_2() { return cAttributeValueAssignment_2; }
		
		//ParamValue
		public RuleCall getAttributeValueParamValueParserRuleCall_2_0() { return cAttributeValueParamValueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExperimentTaskConfiguraitonBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentTaskConfiguraitonBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExperimentTaskConfiguraitonBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Assignment cNotImplementedAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNotImplementedFullStopFullStopFullStopKeyword_2_1_0 = (Keyword)cNotImplementedAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		//ExperimentTaskConfiguraitonBody:
		//    {ExperimentTaskConfiguraitonBody}'{'
		//    ((
		//            // shared members (i.e. super members)
		//            params += Param
		//    )*
		//    |
		//    (notImplemented = '...'))
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExperimentTaskConfiguraitonBody}'{'
		//((
		//        // shared members (i.e. super members)
		//        params += Param
		//)*
		//|
		//(notImplemented = '...'))
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ExperimentTaskConfiguraitonBody}
		public Action getExperimentTaskConfiguraitonBodyAction_0() { return cExperimentTaskConfiguraitonBodyAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//((
		//        // shared members (i.e. super members)
		//        params += Param
		//)*
		//|
		//(notImplemented = '...'))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(
		//            // shared members (i.e. super members)
		//            params += Param
		//    )*
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_2_0_0() { return cParamsParamParserRuleCall_2_0_0; }
		
		//(notImplemented = '...')
		public Assignment getNotImplementedAssignment_2_1() { return cNotImplementedAssignment_2_1; }
		
		//'...'
		public Keyword getNotImplementedFullStopFullStopFullStopKeyword_2_1_0() { return cNotImplementedFullStopFullStopFullStopKeyword_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExperimentTaskConfiguraitonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentTaskConfiguraiton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Assignment cTaskConfigurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTaskConfigurationExperimentTaskConfiguraitonBodyParserRuleCall_2_0 = (RuleCall)cTaskConfigurationAssignment_2.eContents().get(0);
		
		//ExperimentTaskConfiguraiton:
		//    'task' task=[Task|ID] taskConfiguration=ExperimentTaskConfiguraitonBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' task=[Task|ID] taskConfiguration=ExperimentTaskConfiguraitonBody
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//task=[Task|ID]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task|ID]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
		
		//taskConfiguration=ExperimentTaskConfiguraitonBody
		public Assignment getTaskConfigurationAssignment_2() { return cTaskConfigurationAssignment_2; }
		
		//ExperimentTaskConfiguraitonBody
		public RuleCall getTaskConfigurationExperimentTaskConfiguraitonBodyParserRuleCall_2_0() { return cTaskConfigurationExperimentTaskConfiguraitonBodyParserRuleCall_2_0; }
	}
	public class ExperimentFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentFlow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularExpLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalExpLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////
		////
		//ExperimentFlow:
		//    RegularExpLink | ConditionalExpLink
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RegularExpLink | ConditionalExpLink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegularExpLink
		public RuleCall getRegularExpLinkParserRuleCall_0() { return cRegularExpLinkParserRuleCall_0; }
		
		//ConditionalExpLink
		public RuleCall getConditionalExpLinkParserRuleCall_1() { return cConditionalExpLinkParserRuleCall_1; }
	}
	public class ExperimentNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ExperimentNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExperimentSpaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInteractionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExperimentTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////
		//ExperimentNode:
		//    ExperimentSpace | Interaction | ExperimentTask
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExperimentSpace | Interaction | ExperimentTask
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExperimentSpace
		public RuleCall getExperimentSpaceParserRuleCall_0() { return cExperimentSpaceParserRuleCall_0; }
		
		//Interaction
		public RuleCall getInteractionParserRuleCall_1() { return cInteractionParserRuleCall_1; }
		
		//ExperimentTask
		public RuleCall getExperimentTaskParserRuleCall_2() { return cExperimentTaskParserRuleCall_2; }
	}
	public class RegularExpLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.RegularExpLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cStartedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cStartedSTARTKeyword_0_0_0 = (Keyword)cStartedAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cNodesExperimentNodeCrossReference_1_0_0 = (CrossReference)cNodesAssignment_1_0.eContents().get(0);
		private final RuleCall cNodesExperimentNodeIDTerminalRuleCall_1_0_0_1 = (RuleCall)cNodesExperimentNodeCrossReference_1_0_0.eContents().get(1);
		private final Assignment cParallelNodesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cParallelNodesParallelNodesParserRuleCall_1_1_0 = (RuleCall)cParallelNodesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cNodesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final CrossReference cNodesExperimentNodeCrossReference_2_1_0_0 = (CrossReference)cNodesAssignment_2_1_0.eContents().get(0);
		private final RuleCall cNodesExperimentNodeIDTerminalRuleCall_2_1_0_0_1 = (RuleCall)cNodesExperimentNodeCrossReference_2_1_0_0.eContents().get(1);
		private final Assignment cParallelNodesAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cParallelNodesParallelNodesParserRuleCall_2_1_1_0 = (RuleCall)cParallelNodesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEndedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cEndedHyphenMinusGreaterThanSignKeyword_3_0_0 = (Keyword)cEndedAssignment_3_0.eContents().get(0);
		private final Keyword cENDKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RegularExpLink:
		//    (started?='START' '->')?
		//    (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes) ('->' (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes))*
		//    (ended?='->' 'END')? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(started?='START' '->')?
		//(nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes) ('->' (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes))*
		//(ended?='->' 'END')? ';'
		public Group getGroup() { return cGroup; }
		
		//(started?='START' '->')?
		public Group getGroup_0() { return cGroup_0; }
		
		//started?='START'
		public Assignment getStartedAssignment_0_0() { return cStartedAssignment_0_0; }
		
		//'START'
		public Keyword getStartedSTARTKeyword_0_0_0() { return cStartedSTARTKeyword_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//(nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//nodes+=[ExperimentNode]
		public Assignment getNodesAssignment_1_0() { return cNodesAssignment_1_0; }
		
		//[ExperimentNode]
		public CrossReference getNodesExperimentNodeCrossReference_1_0_0() { return cNodesExperimentNodeCrossReference_1_0_0; }
		
		//ID
		public RuleCall getNodesExperimentNodeIDTerminalRuleCall_1_0_0_1() { return cNodesExperimentNodeIDTerminalRuleCall_1_0_0_1; }
		
		//parallelNodes+=ParallelNodes
		public Assignment getParallelNodesAssignment_1_1() { return cParallelNodesAssignment_1_1; }
		
		//ParallelNodes
		public RuleCall getParallelNodesParallelNodesParserRuleCall_1_1_0() { return cParallelNodesParallelNodesParserRuleCall_1_1_0; }
		
		//('->' (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes))*
		public Group getGroup_2() { return cGroup_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0() { return cHyphenMinusGreaterThanSignKeyword_2_0; }
		
		//(nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//nodes+=[ExperimentNode]
		public Assignment getNodesAssignment_2_1_0() { return cNodesAssignment_2_1_0; }
		
		//[ExperimentNode]
		public CrossReference getNodesExperimentNodeCrossReference_2_1_0_0() { return cNodesExperimentNodeCrossReference_2_1_0_0; }
		
		//ID
		public RuleCall getNodesExperimentNodeIDTerminalRuleCall_2_1_0_0_1() { return cNodesExperimentNodeIDTerminalRuleCall_2_1_0_0_1; }
		
		//parallelNodes+=ParallelNodes
		public Assignment getParallelNodesAssignment_2_1_1() { return cParallelNodesAssignment_2_1_1; }
		
		//ParallelNodes
		public RuleCall getParallelNodesParallelNodesParserRuleCall_2_1_1_0() { return cParallelNodesParallelNodesParserRuleCall_2_1_1_0; }
		
		//(ended?='->' 'END')?
		public Group getGroup_3() { return cGroup_3; }
		
		//ended?='->'
		public Assignment getEndedAssignment_3_0() { return cEndedAssignment_3_0; }
		
		//'->'
		public Keyword getEndedHyphenMinusGreaterThanSignKeyword_3_0_0() { return cEndedHyphenMinusGreaterThanSignKeyword_3_0_0; }
		
		//'END'
		public Keyword getENDKeyword_3_1() { return cENDKeyword_3_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ParallelNodesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ParallelNodes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNodesExperimentNodeCrossReference_1_0 = (CrossReference)cNodesAssignment_1.eContents().get(0);
		private final RuleCall cNodesExperimentNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cNodesExperimentNodeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNodesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNodesExperimentNodeCrossReference_2_1_0 = (CrossReference)cNodesAssignment_2_1.eContents().get(0);
		private final RuleCall cNodesExperimentNodeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNodesExperimentNodeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParallelNodes:
		//    '(' nodes+=[ExperimentNode] ('||' nodes+=[ExperimentNode])+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' nodes+=[ExperimentNode] ('||' nodes+=[ExperimentNode])+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//nodes+=[ExperimentNode]
		public Assignment getNodesAssignment_1() { return cNodesAssignment_1; }
		
		//[ExperimentNode]
		public CrossReference getNodesExperimentNodeCrossReference_1_0() { return cNodesExperimentNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getNodesExperimentNodeIDTerminalRuleCall_1_0_1() { return cNodesExperimentNodeIDTerminalRuleCall_1_0_1; }
		
		//('||' nodes+=[ExperimentNode])+
		public Group getGroup_2() { return cGroup_2; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_2_0() { return cVerticalLineVerticalLineKeyword_2_0; }
		
		//nodes+=[ExperimentNode]
		public Assignment getNodesAssignment_2_1() { return cNodesAssignment_2_1; }
		
		//[ExperimentNode]
		public CrossReference getNodesExperimentNodeCrossReference_2_1_0() { return cNodesExperimentNodeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getNodesExperimentNodeIDTerminalRuleCall_2_1_0_1() { return cNodesExperimentNodeIDTerminalRuleCall_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ConditionalExpLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.ConditionalExpLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromNodeExperimentNodeCrossReference_0_0 = (CrossReference)cFromNodeAssignment_0.eContents().get(0);
		private final RuleCall cFromNodeExperimentNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cFromNodeExperimentNodeCrossReference_0_0.eContents().get(1);
		private final Keyword cQuestionMarkHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToNodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToNodeExperimentNodeCrossReference_2_0 = (CrossReference)cToNodeAssignment_2.eContents().get(0);
		private final RuleCall cToNodeExperimentNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cToNodeExperimentNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionSTRINGTerminalRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConditionalExpLink:
		//    fromNode=[ExperimentNode] '?->' toNode=[ExperimentNode] '{' 'condition' condition=STRING '}' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//fromNode=[ExperimentNode] '?->' toNode=[ExperimentNode] '{' 'condition' condition=STRING '}' ';'
		public Group getGroup() { return cGroup; }
		
		//fromNode=[ExperimentNode]
		public Assignment getFromNodeAssignment_0() { return cFromNodeAssignment_0; }
		
		//[ExperimentNode]
		public CrossReference getFromNodeExperimentNodeCrossReference_0_0() { return cFromNodeExperimentNodeCrossReference_0_0; }
		
		//ID
		public RuleCall getFromNodeExperimentNodeIDTerminalRuleCall_0_0_1() { return cFromNodeExperimentNodeIDTerminalRuleCall_0_0_1; }
		
		//'?->'
		public Keyword getQuestionMarkHyphenMinusGreaterThanSignKeyword_1() { return cQuestionMarkHyphenMinusGreaterThanSignKeyword_1; }
		
		//toNode=[ExperimentNode]
		public Assignment getToNodeAssignment_2() { return cToNodeAssignment_2; }
		
		//[ExperimentNode]
		public CrossReference getToNodeExperimentNodeCrossReference_2_0() { return cToNodeExperimentNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getToNodeExperimentNodeIDTerminalRuleCall_2_0_1() { return cToNodeExperimentNodeIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'condition'
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//condition=STRING
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_5_0() { return cConditionSTRINGTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	
	public class EventValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.EventValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTARTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTARTSTARTKeyword_0_0 = (Keyword)cSTARTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENDENDKeyword_1_0 = (Keyword)cENDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EventValue:
		//    START='START' | END='END'
		//;
		public EnumRule getRule() { return rule; }
		
		//START='START' | END='END'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//START='START'
		public EnumLiteralDeclaration getSTARTEnumLiteralDeclaration_0() { return cSTARTEnumLiteralDeclaration_0; }
		
		//'START'
		public Keyword getSTARTSTARTKeyword_0_0() { return cSTARTSTARTKeyword_0_0; }
		
		//END='END'
		public EnumLiteralDeclaration getENDEnumLiteralDeclaration_1() { return cENDEnumLiteralDeclaration_1; }
		
		//'END'
		public Keyword getENDENDKeyword_1_0() { return cENDENDKeyword_1_0; }
	}
	public class MetricKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.MetricKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSeriesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSeriesSeriesKeyword_0_0 = (Keyword)cSeriesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cScalarEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cScalarScalarKeyword_1_0 = (Keyword)cScalarEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MetricKind:
		//    series='series' | scalar='scalar'
		//;
		public EnumRule getRule() { return rule; }
		
		//series='series' | scalar='scalar'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//series='series'
		public EnumLiteralDeclaration getSeriesEnumLiteralDeclaration_0() { return cSeriesEnumLiteralDeclaration_0; }
		
		//'series'
		public Keyword getSeriesSeriesKeyword_0_0() { return cSeriesSeriesKeyword_0_0; }
		
		//scalar='scalar'
		public EnumLiteralDeclaration getScalarEnumLiteralDeclaration_1() { return cScalarEnumLiteralDeclaration_1; }
		
		//'scalar'
		public Keyword getScalarScalarKeyword_1_0() { return cScalarScalarKeyword_1_0; }
	}
	
	private final RootElements pRoot;
	private final WorkflowElements pWorkflow;
	private final DataElements pData;
	private final InputDataElements pInputData;
	private final OutputDataElements pOutputData;
	private final DataConfigurationElements pDataConfiguration;
	private final DataLinkElements pDataLink;
	private final CompositeWorkflowElements pCompositeWorkflow;
	private final NodeElements pNode;
	private final TaskElements pTask;
	private final MetaDataElements pMetaData;
	private final EventElements pEvent;
	private final EventValueElements eEventValue;
	private final OperatorElements pOperator;
	private final TerminalRule tJOIN_TERM;
	private final TerminalRule tPARALLEL_TERM;
	private final TerminalRule tEXCLUSIVE_TERM;
	private final TerminalRule tINCLUSIVE_TERM;
	private final JoinElements pJoin;
	private final ParallelElements pParallel;
	private final ExclusiveElements pExclusive;
	private final InclusiveElements pInclusive;
	private final ConditionElements pCondition;
	private final CaseElements pCase;
	private final LinkElements pLink;
	private final NodeLinkElements pNodeLink;
	private final ConditionalLinkElements pConditionalLink;
	private final RegularLinkElements pRegularLink;
	private final RegularLinksElements pRegularLinks;
	private final ExceptionalLinkElements pExceptionalLink;
	private final GroupElements pGroup;
	private final AssembledWorkflowElements pAssembledWorkflow;
	private final SubstitutedTaskElements pSubstitutedTask;
	private final TaskSpecificationElements pTaskSpecification;
	private final DependencyElements pDependency;
	private final ParameterElements pParameter;
	private final ParamElements pParam;
	private final ParamValueElements pParamValue;
	private final ParamValueRangeElements pParamValueRange;
	private final ParamValueEnumElements pParamValueEnum;
	private final ParamValueListElements pParamValueList;
	private final PrimitiveValueElements pPrimitiveValue;
	private final TerminalRule tFLOAT;
	private final TerminalRule tBOOLEAN;
	private final ParameterTypeElements pParameterType;
	private final StructureElements pStructure;
	private final FieldElements pField;
	private final ArrayElements pArray;
	private final PrimitiveTypeElements pPrimitiveType;
	private final MetricElements pMetric;
	private final MetricKindElements eMetricKind;
	private final ExperimentElements pExperiment;
	private final ControlElements pControl;
	private final ExperimentStepElements pExperimentStep;
	private final ExperimentTaskElements pExperimentTask;
	private final InteractionElements pInteraction;
	private final ExperimentSpaceElements pExperimentSpace;
	private final TaskConfigurationElements pTaskConfiguration;
	private final ActionArgumentElements pActionArgument;
	private final ActionElements pAction;
	private final AttributeElements pAttribute;
	private final ExperimentTaskConfiguraitonBodyElements pExperimentTaskConfiguraitonBody;
	private final ExperimentTaskConfiguraitonElements pExperimentTaskConfiguraiton;
	private final ExperimentFlowElements pExperimentFlow;
	private final ExperimentNodeElements pExperimentNode;
	private final RegularExpLinkElements pRegularExpLink;
	private final ParallelNodesElements pParallelNodes;
	private final ConditionalExpLinkElements pConditionalExpLink;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pWorkflow = new WorkflowElements();
		this.pData = new DataElements();
		this.pInputData = new InputDataElements();
		this.pOutputData = new OutputDataElements();
		this.pDataConfiguration = new DataConfigurationElements();
		this.pDataLink = new DataLinkElements();
		this.pCompositeWorkflow = new CompositeWorkflowElements();
		this.pNode = new NodeElements();
		this.pTask = new TaskElements();
		this.pMetaData = new MetaDataElements();
		this.pEvent = new EventElements();
		this.eEventValue = new EventValueElements();
		this.pOperator = new OperatorElements();
		this.tJOIN_TERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.JOIN_TERM");
		this.tPARALLEL_TERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.PARALLEL_TERM");
		this.tEXCLUSIVE_TERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.EXCLUSIVE_TERM");
		this.tINCLUSIVE_TERM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.INCLUSIVE_TERM");
		this.pJoin = new JoinElements();
		this.pParallel = new ParallelElements();
		this.pExclusive = new ExclusiveElements();
		this.pInclusive = new InclusiveElements();
		this.pCondition = new ConditionElements();
		this.pCase = new CaseElements();
		this.pLink = new LinkElements();
		this.pNodeLink = new NodeLinkElements();
		this.pConditionalLink = new ConditionalLinkElements();
		this.pRegularLink = new RegularLinkElements();
		this.pRegularLinks = new RegularLinksElements();
		this.pExceptionalLink = new ExceptionalLinkElements();
		this.pGroup = new GroupElements();
		this.pAssembledWorkflow = new AssembledWorkflowElements();
		this.pSubstitutedTask = new SubstitutedTaskElements();
		this.pTaskSpecification = new TaskSpecificationElements();
		this.pDependency = new DependencyElements();
		this.pParameter = new ParameterElements();
		this.pParam = new ParamElements();
		this.pParamValue = new ParamValueElements();
		this.pParamValueRange = new ParamValueRangeElements();
		this.pParamValueEnum = new ParamValueEnumElements();
		this.pParamValueList = new ParamValueListElements();
		this.pPrimitiveValue = new PrimitiveValueElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.FLOAT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "cz.smartarch.yamas.dsl.XDSL.BOOLEAN");
		this.pParameterType = new ParameterTypeElements();
		this.pStructure = new StructureElements();
		this.pField = new FieldElements();
		this.pArray = new ArrayElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pMetric = new MetricElements();
		this.eMetricKind = new MetricKindElements();
		this.pExperiment = new ExperimentElements();
		this.pControl = new ControlElements();
		this.pExperimentStep = new ExperimentStepElements();
		this.pExperimentTask = new ExperimentTaskElements();
		this.pInteraction = new InteractionElements();
		this.pExperimentSpace = new ExperimentSpaceElements();
		this.pTaskConfiguration = new TaskConfigurationElements();
		this.pActionArgument = new ActionArgumentElements();
		this.pAction = new ActionElements();
		this.pAttribute = new AttributeElements();
		this.pExperimentTaskConfiguraitonBody = new ExperimentTaskConfiguraitonBodyElements();
		this.pExperimentTaskConfiguraiton = new ExperimentTaskConfiguraitonElements();
		this.pExperimentFlow = new ExperimentFlowElements();
		this.pExperimentNode = new ExperimentNodeElements();
		this.pRegularExpLink = new RegularExpLinkElements();
		this.pParallelNodes = new ParallelNodesElements();
		this.pConditionalExpLink = new ConditionalExpLinkElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("cz.smartarch.yamas.dsl.XDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//    (asPackage?= 'package' name=ID ';')?
	//    (
	//        workflows += Workflow        |
	//        groups += Group                |
	//        experiments += Experiment
	//    )*
	//;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	///*     # Workflow     */
	//// workflow is an abstract class that can be extended by the following classes
	//Workflow:
	//     CompositeWorkflow | TaskSpecification  | AssembledWorkflow
	//    ;
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	/////* ## InputData and OutputData */
	//Data:
	//    InputData | OutputData
	//;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//InputData:
	//    'input' 'data' name=ID ';'
	//;
	public InputDataElements getInputDataAccess() {
		return pInputData;
	}
	
	public ParserRule getInputDataRule() {
		return getInputDataAccess().getRule();
	}
	
	//OutputData:
	//    'output' 'data' name=ID ';'
	//;
	public OutputDataElements getOutputDataAccess() {
		return pOutputData;
	}
	
	public ParserRule getOutputDataRule() {
		return getOutputDataAccess().getRule();
	}
	
	//DataConfiguration:
	//    'configure' 'data' data=[Data] '{'
	//    (('path' path=STRING ';')? & ('type' type=STRING ';')?
	//        &     ('default' defaultValue=ParamValue ';')?
	//    )
	//    '}'
	//;
	public DataConfigurationElements getDataConfigurationAccess() {
		return pDataConfiguration;
	}
	
	public ParserRule getDataConfigurationRule() {
		return getDataConfigurationAccess().getRule();
	}
	
	///* ## DataLink */
	//DataLink:
	//    ((inputDataTask=[Task] asInputTask?='.')?  inputData=[Data|ID])
	//    '-->'
	//    ((outputDataTask=[Task] asOutputTask?='.')? outputData=[Data|ID])
	//    ';'
	//;
	public DataLinkElements getDataLinkAccess() {
		return pDataLink;
	}
	
	public ParserRule getDataLinkRule() {
		return getDataLinkAccess().getRule();
	}
	
	///* ## CompositeWorkflow */
	////
	//CompositeWorkflow:
	//    'workflow' name=ID '{'
	//        (
	////            // shared members (i.e. super members)
	//            inputs += InputData                        |
	//            outputs += OutputData                    |
	////
	////            // dedicated members
	//            links += Link                            |
	//            dataLinks += DataLink                    |
	//            nodes += Node                            |
	////
	////            // execution members
	//            dataConfigurations += DataConfiguration
	//        )*
	//    '}'
	//;
	public CompositeWorkflowElements getCompositeWorkflowAccess() {
		return pCompositeWorkflow;
	}
	
	public ParserRule getCompositeWorkflowRule() {
		return getCompositeWorkflowAccess().getRule();
	}
	
	/////* ## Node */
	//Node:
	//    Task | Event | Operator
	//;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	////
	/////* ### Task */
	//Task:
	//     'task' name=ID (abstract?=';' | configured?=    '{' (
	//            // shared members (i.e. super members)
	//            inputs += InputData            |
	//            outputs += OutputData         |
	//            params += Param                |
	//            // special members
	//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
	//            // single members
	//            'description' description=STRING ';'        |
	//            'implementation' primitiveImplementation=STRING ';'    |
	//            'subworkflow' subworkflow=STRING ';'                |
	//            'dependency' dependency=STRING ';'
	//    )*
	//    '}')
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//MetaData:
	//    name=STRING ':' value=STRING
	//;
	public MetaDataElements getMetaDataAccess() {
		return pMetaData;
	}
	
	public ParserRule getMetaDataRule() {
		return getMetaDataAccess().getRule();
	}
	
	///* ### Event as Singltons */
	//Event:
	//    name=EventValue
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//enum EventValue:
	//    START='START' | END='END'
	//;
	public EventValueElements getEventValueAccess() {
		return eEventValue;
	}
	
	public EnumRule getEventValueRule() {
		return getEventValueAccess().getRule();
	}
	
	///* ### Operator */
	//Operator:
	//    Join | Parallel  | Exclusive | Inclusive
	//;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//terminal JOIN_TERM:
	//    'JOIN-'INT
	//;
	public TerminalRule getJOIN_TERMRule() {
		return tJOIN_TERM;
	}
	
	//terminal PARALLEL_TERM:
	//    'PARALLEL-'INT
	//;
	public TerminalRule getPARALLEL_TERMRule() {
		return tPARALLEL_TERM;
	}
	
	//terminal EXCLUSIVE_TERM:
	//    'EXCLUSIVE-'INT
	//;
	public TerminalRule getEXCLUSIVE_TERMRule() {
		return tEXCLUSIVE_TERM;
	}
	
	//terminal INCLUSIVE_TERM:
	//    'INCLUSIVE-'INT
	//;
	public TerminalRule getINCLUSIVE_TERMRule() {
		return tINCLUSIVE_TERM;
	}
	
	//Join :
	//    name=JOIN_TERM
	// ;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//Parallel :
	//    name=PARALLEL_TERM
	//;
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//Exclusive :
	//    name=EXCLUSIVE_TERM  '{'
	//    conditions += Condition+
	//    '}'
	//;
	public ExclusiveElements getExclusiveAccess() {
		return pExclusive;
	}
	
	public ParserRule getExclusiveRule() {
		return getExclusiveAccess().getRule();
	}
	
	//Inclusive :
	//    name=INCLUSIVE_TERM  '{'
	//        conditions += Condition+
	//    '}'
	//;
	public InclusiveElements getInclusiveAccess() {
		return pInclusive;
	}
	
	public ParserRule getInclusiveRule() {
		return getInclusiveAccess().getRule();
	}
	
	//Condition:
	//    'condition' condition=STRING '{'
	//        cases+=Case+
	//    '}'
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Case:
	//    case=STRING target=[Node] ';'
	//;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	///* ## LINK */
	//Link:
	//    ConditionalLink | RegularLinks | ExceptionalLink
	//;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//NodeLink:
	//    task=[Task] | event=Event
	//;
	public NodeLinkElements getNodeLinkAccess() {
		return pNodeLink;
	}
	
	public ParserRule getNodeLinkRule() {
		return getNodeLinkAccess().getRule();
	}
	
	//ConditionalLink:
	//    input=NodeLink '?->' output=NodeLink '{'
	//            "condition" condition=STRING ';'
	//    '}'
	//;
	public ConditionalLinkElements getConditionalLinkAccess() {
		return pConditionalLink;
	}
	
	public ParserRule getConditionalLinkRule() {
		return getConditionalLinkAccess().getRule();
	}
	
	//RegularLink:
	//    input=NodeLink '->' ouput=NodeLink
	//;
	public RegularLinkElements getRegularLinkAccess() {
		return pRegularLink;
	}
	
	public ParserRule getRegularLinkRule() {
		return getRegularLinkAccess().getRule();
	}
	
	//RegularLinks:
	//    input=NodeLink ('->' links+=RegularLink)* '->' output=NodeLink ';'
	//;
	public RegularLinksElements getRegularLinksAccess() {
		return pRegularLinks;
	}
	
	public ParserRule getRegularLinksRule() {
		return getRegularLinksAccess().getRule();
	}
	
	//ExceptionalLink:
	//    input=NodeLink '!->' output=NodeLink '{'
	//        "event" event=STRING ';'
	//    '}'
	//;
	public ExceptionalLinkElements getExceptionalLinkAccess() {
		return pExceptionalLink;
	}
	
	public ParserRule getExceptionalLinkRule() {
		return getExceptionalLinkAccess().getRule();
	}
	
	///*     # Group     */
	//Group:
	//    'group' name=ID '{'
	//        (tasks+=[Task] (',' tasks+=[Task])* ';')
	//    '}'
	//;
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	///* ## AssembledWorkflow */
	//AssembledWorkflow:
	//    'workflow' name=ID 'from' parent=[Workflow] '{'
	//        (
	//            // shared members (i.e. super members)
	//            inputs += InputData            |
	//            outputs += OutputData         |
	//            // dedicated members
	//            substitutedTasks += SubstitutedTask
	//        )*
	//    '}'
	//;
	public AssembledWorkflowElements getAssembledWorkflowAccess() {
		return pAssembledWorkflow;
	}
	
	public ParserRule getAssembledWorkflowRule() {
		return getAssembledWorkflowAccess().getRule();
	}
	
	//SubstitutedTask:
	//    'task' name=[Task]     '{' (
	//            // shared members (i.e. super members)
	//            inputs += InputData            |
	//            outputs += OutputData         |
	//            params += Param                |
	//            // special members
	//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
	//            // single members
	//            'description' description=STRING ';'        |
	//            'implementation' primitiveImplementation=STRING ';'    |
	//            'subworkflow' subworkflow=STRING ';'                |
	//            'dependency' dependency=STRING ';'
	//    )*
	//    '}'
	//;
	public SubstitutedTaskElements getSubstitutedTaskAccess() {
		return pSubstitutedTask;
	}
	
	public ParserRule getSubstitutedTaskRule() {
		return getSubstitutedTaskAccess().getRule();
	}
	
	///* ## TaskSpecification */
	//TaskSpecification:
	//    'task' name=ID '{'
	//        (
	//            // shared members (i.e. super members)
	//            inputs += InputData            |
	//            outputs += OutputData        |
	//            // dedicated members
	//            metrics += Metric            |
	//            parameters += Parameter     |
	//            'implementation' implementation=STRING ';'    |
	//            dependencies += Dependency
	//        )*
	//    '}'
	//;
	public TaskSpecificationElements getTaskSpecificationAccess() {
		return pTaskSpecification;
	}
	
	public ParserRule getTaskSpecificationRule() {
		return getTaskSpecificationAccess().getRule();
	}
	
	//Dependency:
	//    'dependency' name=ID value=STRING ';'
	//;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	///* ### Parameter */
	//Parameter:
	//    'param' name=ID '{'
	//        (
	//            ('type' type=ParameterType ';')?     &
	//            ('default' (defaultValueString=STRING | defaultValueInt=INT) ';')? &
	//            ((rangeValue=ParamValueRange | enumValue= ParamValueEnum) ';')? &
	//            ('constraint' valueConstraint=STRING ';')?
	//        )
	//    '}'
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Param:
	//    'param' name=ID (assigned?='=' (value=ParamValue | ref=[Param|ID]))? ';'
	//;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//ParamValue:
	//    rangeValue=ParamValueRange | enumValue=ParamValueEnum | primitiveValue=PrimitiveValue | listValue=ParamValueList
	//;
	public ParamValueElements getParamValueAccess() {
		return pParamValue;
	}
	
	public ParserRule getParamValueRule() {
		return getParamValueAccess().getRule();
	}
	
	//ParamValueRange:
	//    'range' '('start=INT ',' end=INT (',' step=INT)?')'
	//;
	public ParamValueRangeElements getParamValueRangeAccess() {
		return pParamValueRange;
	}
	
	public ParserRule getParamValueRangeRule() {
		return getParamValueRangeAccess().getRule();
	}
	
	//ParamValueEnum:
	//    'enum' '(' values+=PrimitiveValue (',' values+=PrimitiveValue)* ')'
	//;
	public ParamValueEnumElements getParamValueEnumAccess() {
		return pParamValueEnum;
	}
	
	public ParserRule getParamValueEnumRule() {
		return getParamValueEnumAccess().getRule();
	}
	
	//ParamValueList:
	//    '[' values+=PrimitiveValue (',' values+=PrimitiveValue)* ']'
	//;
	public ParamValueListElements getParamValueListAccess() {
		return pParamValueList;
	}
	
	public ParserRule getParamValueListRule() {
		return getParamValueListAccess().getRule();
	}
	
	//PrimitiveValue:
	//    INT | STRING | FLOAT | BOOLEAN
	//;
	public PrimitiveValueElements getPrimitiveValueAccess() {
		return pPrimitiveValue;
	}
	
	public ParserRule getPrimitiveValueRule() {
		return getPrimitiveValueAccess().getRule();
	}
	
	//terminal FLOAT:
	//    '-'? INT '.' INT
	//;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal BOOLEAN:
	//    'true' | 'false'
	//;
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	///* ### ParameterType */
	//ParameterType:
	//    Structure | PrimitiveType | Array
	//;
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//Structure:
	//    'struct' name=ID '{'
	//        fields += Field ';'
	//    '}'
	//;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}
	
	//Field:
	//    name=ID ('as' type=ParameterType)?
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Array:
	//    name=ID '['length=INT']' ('as' type=ParameterType)?
	//;
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//PrimitiveType returns ParameterType:
	//    {PrimitiveType} ('Integer' | 'Boolean' | 'String' | 'Blob')
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	///* ### Metric */
	//Metric:
	//    'metric' name=ID '{'
	//        (
	//            ('type' type=ParameterType ';')? &
	//            ('kind' kind=MetricKind ';')?
	//        )
	//    '}'
	//;
	public MetricElements getMetricAccess() {
		return pMetric;
	}
	
	public ParserRule getMetricRule() {
		return getMetricAccess().getRule();
	}
	
	//enum MetricKind:
	//    series='series' | scalar='scalar'
	//;
	public MetricKindElements getMetricKindAccess() {
		return eMetricKind;
	}
	
	public EnumRule getMetricKindRule() {
		return getMetricKindAccess().getRule();
	}
	
	///* ## Experiment */
	//Experiment:
	//    'experiment' name=ID '{'
	//        ('intent' intent=ID ';')?
	//        (
	//            steps += ExperimentStep     |
	//            control = Control
	//        )*
	//    '}'
	//;
	public ExperimentElements getExperimentAccess() {
		return pExperiment;
	}
	
	public ParserRule getExperimentRule() {
		return getExperimentAccess().getRule();
	}
	
	//Control:
	//        {Control}'control' '{'
	//        (
	//            flows += ExperimentFlow*
	//            |
	//            (notImplemented = '...')
	//        )
	//        '}'
	//;
	public ControlElements getControlAccess() {
		return pControl;
	}
	
	public ParserRule getControlRule() {
		return getControlAccess().getRule();
	}
	
	///* ## ExperimentStep */
	//ExperimentStep:
	//    ExperimentTask | Interaction | ExperimentSpace
	//;
	public ExperimentStepElements getExperimentStepAccess() {
		return pExperimentStep;
	}
	
	public ParserRule getExperimentStepRule() {
		return getExperimentStepAccess().getRule();
	}
	
	///* ### ExperimentTask */
	//ExperimentTask:
	//     ('task' name=ID abstract?=';') |
	//     ('task' name=ID configured?= '{' (
	//            // shared members (i.e. super members)
	//            inputs += InputData            |
	//            outputs += OutputData         |
	//            params += Param                |
	//            // special members
	//            ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
	//            // single members
	//            'description' description=STRING ';'        |
	//            'implementation' primitiveImplementation=STRING ';'    |
	//            'subworkflow' subworkflow=STRING ';'                |
	//            'dependency' dependency=STRING ';'
	//    )*
	//    '}')
	//;
	public ExperimentTaskElements getExperimentTaskAccess() {
		return pExperimentTask;
	}
	
	public ParserRule getExperimentTaskRule() {
		return getExperimentTaskAccess().getRule();
	}
	
	///* ### Interaction */
	//Interaction:
	//    'interaction' name=ID '{'
	//    '}'
	//;
	public InteractionElements getInteractionAccess() {
		return pInteraction;
	}
	
	public ParserRule getInteractionRule() {
		return getInteractionAccess().getRule();
	}
	
	///* ### Space */
	//ExperimentSpace:
	//    'space' name=ID 'of' assembledWorkflow=[Workflow] '{'
	//            (
	//                'strategy' strategy=ID ';'     |
	//                params += Param                |
	//                actions += Action            |
	//                attributes += Attribute        |
	//                taskConfigurations += TaskConfiguration
	//            )*
	//    '}'
	//;
	public ExperimentSpaceElements getExperimentSpaceAccess() {
		return pExperimentSpace;
	}
	
	public ParserRule getExperimentSpaceRule() {
		return getExperimentSpaceAccess().getRule();
	}
	
	//TaskConfiguration:
	//    'task' task=[Task] ((configured?= '{'
	//        (        inputs += InputData            |
	//                outputs += OutputData         |
	//                params += Param                |
	//                // special members
	//                ('metadata''{'     metadata += MetaData (',' metadata += MetaData)     '}' ) |
	//                // single members
	//                'description' description=STRING ';'        |
	//                'implementation' primitiveImplementation=STRING ';'    |
	//                'subworkflow' subworkflow=STRING ';'                |
	//                'dependency' dependency=STRING ';'
	//            )*
	//        '}'
	//        ) | abstrac?=';')
	//;
	public TaskConfigurationElements getTaskConfigurationAccess() {
		return pTaskConfiguration;
	}
	
	public ParserRule getTaskConfigurationRule() {
		return getTaskConfigurationAccess().getRule();
	}
	
	//ActionArgument:
	//    string=STRING | id=ID
	//;
	public ActionArgumentElements getActionArgumentAccess() {
		return pActionArgument;
	}
	
	public ParserRule getActionArgumentRule() {
		return getActionArgumentAccess().getRule();
	}
	
	//Action:
	//    ('action' actionName=ID '(' (arguments+=ActionArgument (',' arguments+=ActionArgument)*)? ')' ';')
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Attribute:
	//    name=ID '=' attributeValue=ParamValue ';'
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	////
	//ExperimentTaskConfiguraitonBody:
	//    {ExperimentTaskConfiguraitonBody}'{'
	//    ((
	//            // shared members (i.e. super members)
	//            params += Param
	//    )*
	//    |
	//    (notImplemented = '...'))
	//    '}'
	//;
	public ExperimentTaskConfiguraitonBodyElements getExperimentTaskConfiguraitonBodyAccess() {
		return pExperimentTaskConfiguraitonBody;
	}
	
	public ParserRule getExperimentTaskConfiguraitonBodyRule() {
		return getExperimentTaskConfiguraitonBodyAccess().getRule();
	}
	
	//ExperimentTaskConfiguraiton:
	//    'task' task=[Task|ID] taskConfiguration=ExperimentTaskConfiguraitonBody
	//;
	public ExperimentTaskConfiguraitonElements getExperimentTaskConfiguraitonAccess() {
		return pExperimentTaskConfiguraiton;
	}
	
	public ParserRule getExperimentTaskConfiguraitonRule() {
		return getExperimentTaskConfiguraitonAccess().getRule();
	}
	
	////
	////
	//ExperimentFlow:
	//    RegularExpLink | ConditionalExpLink
	//;
	public ExperimentFlowElements getExperimentFlowAccess() {
		return pExperimentFlow;
	}
	
	public ParserRule getExperimentFlowRule() {
		return getExperimentFlowAccess().getRule();
	}
	
	////
	//ExperimentNode:
	//    ExperimentSpace | Interaction | ExperimentTask
	//;
	public ExperimentNodeElements getExperimentNodeAccess() {
		return pExperimentNode;
	}
	
	public ParserRule getExperimentNodeRule() {
		return getExperimentNodeAccess().getRule();
	}
	
	//RegularExpLink:
	//    (started?='START' '->')?
	//    (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes) ('->' (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes))*
	//    (ended?='->' 'END')? ';'
	//;
	public RegularExpLinkElements getRegularExpLinkAccess() {
		return pRegularExpLink;
	}
	
	public ParserRule getRegularExpLinkRule() {
		return getRegularExpLinkAccess().getRule();
	}
	
	//ParallelNodes:
	//    '(' nodes+=[ExperimentNode] ('||' nodes+=[ExperimentNode])+ ')'
	//;
	public ParallelNodesElements getParallelNodesAccess() {
		return pParallelNodes;
	}
	
	public ParserRule getParallelNodesRule() {
		return getParallelNodesAccess().getRule();
	}
	
	//ConditionalExpLink:
	//    fromNode=[ExperimentNode] '?->' toNode=[ExperimentNode] '{' 'condition' condition=STRING '}' ';'
	//;
	public ConditionalExpLinkElements getConditionalExpLinkAccess() {
		return pConditionalExpLink;
	}
	
	public ParserRule getConditionalExpLinkRule() {
		return getConditionalExpLinkAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
