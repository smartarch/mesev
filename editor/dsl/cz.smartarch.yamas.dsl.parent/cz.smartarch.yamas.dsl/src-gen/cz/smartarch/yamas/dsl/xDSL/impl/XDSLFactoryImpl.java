/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.xDSL.impl;

import cz.smartarch.yamas.dsl.xDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XDSLFactoryImpl extends EFactoryImpl implements XDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XDSLFactory init()
  {
    try
    {
      XDSLFactory theXDSLFactory = (XDSLFactory)EPackage.Registry.INSTANCE.getEFactory(XDSLPackage.eNS_URI);
      if (theXDSLFactory != null)
      {
        return theXDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XDSLPackage.ROOT: return createRoot();
      case XDSLPackage.WORKFLOW: return createWorkflow();
      case XDSLPackage.DATA: return createData();
      case XDSLPackage.INPUT_DATA: return createInputData();
      case XDSLPackage.OUTPUT_DATA: return createOutputData();
      case XDSLPackage.DATA_CONFIGURATION: return createDataConfiguration();
      case XDSLPackage.DATA_LINK: return createDataLink();
      case XDSLPackage.COMPOSITE_WORKFLOW: return createCompositeWorkflow();
      case XDSLPackage.NODE: return createNode();
      case XDSLPackage.TASK: return createTask();
      case XDSLPackage.META_DATA: return createMetaData();
      case XDSLPackage.EVENT: return createEvent();
      case XDSLPackage.OPERATOR: return createOperator();
      case XDSLPackage.JOIN: return createJoin();
      case XDSLPackage.PARALLEL: return createParallel();
      case XDSLPackage.EXCLUSIVE: return createExclusive();
      case XDSLPackage.INCLUSIVE: return createInclusive();
      case XDSLPackage.CONDITION: return createCondition();
      case XDSLPackage.CASE: return createCase();
      case XDSLPackage.LINK: return createLink();
      case XDSLPackage.NODE_LINK: return createNodeLink();
      case XDSLPackage.CONDITIONAL_LINK: return createConditionalLink();
      case XDSLPackage.REGULAR_LINK: return createRegularLink();
      case XDSLPackage.REGULAR_LINKS: return createRegularLinks();
      case XDSLPackage.EXCEPTIONAL_LINK: return createExceptionalLink();
      case XDSLPackage.GROUP: return createGroup();
      case XDSLPackage.ASSEMBLED_WORKFLOW: return createAssembledWorkflow();
      case XDSLPackage.SUBSTITUTED_TASK: return createSubstitutedTask();
      case XDSLPackage.TASK_SPECIFICATION: return createTaskSpecification();
      case XDSLPackage.DEPENDENCY: return createDependency();
      case XDSLPackage.PARAMETER: return createParameter();
      case XDSLPackage.PARAM: return createParam();
      case XDSLPackage.PARAM_VALUE: return createParamValue();
      case XDSLPackage.PARAM_VALUE_RANGE: return createParamValueRange();
      case XDSLPackage.PARAM_VALUE_ENUM: return createParamValueEnum();
      case XDSLPackage.PARAM_VALUE_LIST: return createParamValueList();
      case XDSLPackage.PARAMETER_TYPE: return createParameterType();
      case XDSLPackage.STRUCTURE: return createStructure();
      case XDSLPackage.FIELD: return createField();
      case XDSLPackage.ARRAY: return createArray();
      case XDSLPackage.METRIC: return createMetric();
      case XDSLPackage.EXPERIMENT: return createExperiment();
      case XDSLPackage.CONTROL: return createControl();
      case XDSLPackage.EXPERIMENT_STEP: return createExperimentStep();
      case XDSLPackage.EXPERIMENT_TASK: return createExperimentTask();
      case XDSLPackage.INTERACTION: return createInteraction();
      case XDSLPackage.EXPERIMENT_SPACE: return createExperimentSpace();
      case XDSLPackage.TASK_CONFIGURATION: return createTaskConfiguration();
      case XDSLPackage.ACTION_ARGUMENT: return createActionArgument();
      case XDSLPackage.ACTION: return createAction();
      case XDSLPackage.ATTRIBUTE: return createAttribute();
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON_BODY: return createExperimentTaskConfiguraitonBody();
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON: return createExperimentTaskConfiguraiton();
      case XDSLPackage.EXPERIMENT_FLOW: return createExperimentFlow();
      case XDSLPackage.EXPERIMENT_NODE: return createExperimentNode();
      case XDSLPackage.REGULAR_EXP_LINK: return createRegularExpLink();
      case XDSLPackage.PARALLEL_NODES: return createParallelNodes();
      case XDSLPackage.CONDITIONAL_EXP_LINK: return createConditionalExpLink();
      case XDSLPackage.PRIMITIVE_TYPE: return createPrimitiveType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XDSLPackage.EVENT_VALUE:
        return createEventValueFromString(eDataType, initialValue);
      case XDSLPackage.METRIC_KIND:
        return createMetricKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XDSLPackage.EVENT_VALUE:
        return convertEventValueToString(eDataType, instanceValue);
      case XDSLPackage.METRIC_KIND:
        return convertMetricKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Root createRoot()
  {
    RootImpl root = new RootImpl();
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workflow createWorkflow()
  {
    WorkflowImpl workflow = new WorkflowImpl();
    return workflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Data createData()
  {
    DataImpl data = new DataImpl();
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputData createInputData()
  {
    InputDataImpl inputData = new InputDataImpl();
    return inputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputData createOutputData()
  {
    OutputDataImpl outputData = new OutputDataImpl();
    return outputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataConfiguration createDataConfiguration()
  {
    DataConfigurationImpl dataConfiguration = new DataConfigurationImpl();
    return dataConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataLink createDataLink()
  {
    DataLinkImpl dataLink = new DataLinkImpl();
    return dataLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompositeWorkflow createCompositeWorkflow()
  {
    CompositeWorkflowImpl compositeWorkflow = new CompositeWorkflowImpl();
    return compositeWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task createTask()
  {
    TaskImpl task = new TaskImpl();
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaData createMetaData()
  {
    MetaDataImpl metaData = new MetaDataImpl();
    return metaData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operator createOperator()
  {
    OperatorImpl operator = new OperatorImpl();
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Join createJoin()
  {
    JoinImpl join = new JoinImpl();
    return join;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parallel createParallel()
  {
    ParallelImpl parallel = new ParallelImpl();
    return parallel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exclusive createExclusive()
  {
    ExclusiveImpl exclusive = new ExclusiveImpl();
    return exclusive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inclusive createInclusive()
  {
    InclusiveImpl inclusive = new InclusiveImpl();
    return inclusive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Case createCase()
  {
    CaseImpl case_ = new CaseImpl();
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeLink createNodeLink()
  {
    NodeLinkImpl nodeLink = new NodeLinkImpl();
    return nodeLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalLink createConditionalLink()
  {
    ConditionalLinkImpl conditionalLink = new ConditionalLinkImpl();
    return conditionalLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularLink createRegularLink()
  {
    RegularLinkImpl regularLink = new RegularLinkImpl();
    return regularLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularLinks createRegularLinks()
  {
    RegularLinksImpl regularLinks = new RegularLinksImpl();
    return regularLinks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExceptionalLink createExceptionalLink()
  {
    ExceptionalLinkImpl exceptionalLink = new ExceptionalLinkImpl();
    return exceptionalLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Group createGroup()
  {
    GroupImpl group = new GroupImpl();
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssembledWorkflow createAssembledWorkflow()
  {
    AssembledWorkflowImpl assembledWorkflow = new AssembledWorkflowImpl();
    return assembledWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubstitutedTask createSubstitutedTask()
  {
    SubstitutedTaskImpl substitutedTask = new SubstitutedTaskImpl();
    return substitutedTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskSpecification createTaskSpecification()
  {
    TaskSpecificationImpl taskSpecification = new TaskSpecificationImpl();
    return taskSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Param createParam()
  {
    ParamImpl param = new ParamImpl();
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamValue createParamValue()
  {
    ParamValueImpl paramValue = new ParamValueImpl();
    return paramValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamValueRange createParamValueRange()
  {
    ParamValueRangeImpl paramValueRange = new ParamValueRangeImpl();
    return paramValueRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamValueEnum createParamValueEnum()
  {
    ParamValueEnumImpl paramValueEnum = new ParamValueEnumImpl();
    return paramValueEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamValueList createParamValueList()
  {
    ParamValueListImpl paramValueList = new ParamValueListImpl();
    return paramValueList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterType createParameterType()
  {
    ParameterTypeImpl parameterType = new ParameterTypeImpl();
    return parameterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Structure createStructure()
  {
    StructureImpl structure = new StructureImpl();
    return structure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Array createArray()
  {
    ArrayImpl array = new ArrayImpl();
    return array;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Metric createMetric()
  {
    MetricImpl metric = new MetricImpl();
    return metric;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Experiment createExperiment()
  {
    ExperimentImpl experiment = new ExperimentImpl();
    return experiment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Control createControl()
  {
    ControlImpl control = new ControlImpl();
    return control;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentStep createExperimentStep()
  {
    ExperimentStepImpl experimentStep = new ExperimentStepImpl();
    return experimentStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentTask createExperimentTask()
  {
    ExperimentTaskImpl experimentTask = new ExperimentTaskImpl();
    return experimentTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interaction createInteraction()
  {
    InteractionImpl interaction = new InteractionImpl();
    return interaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentSpace createExperimentSpace()
  {
    ExperimentSpaceImpl experimentSpace = new ExperimentSpaceImpl();
    return experimentSpace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskConfiguration createTaskConfiguration()
  {
    TaskConfigurationImpl taskConfiguration = new TaskConfigurationImpl();
    return taskConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionArgument createActionArgument()
  {
    ActionArgumentImpl actionArgument = new ActionArgumentImpl();
    return actionArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentTaskConfiguraitonBody createExperimentTaskConfiguraitonBody()
  {
    ExperimentTaskConfiguraitonBodyImpl experimentTaskConfiguraitonBody = new ExperimentTaskConfiguraitonBodyImpl();
    return experimentTaskConfiguraitonBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentTaskConfiguraiton createExperimentTaskConfiguraiton()
  {
    ExperimentTaskConfiguraitonImpl experimentTaskConfiguraiton = new ExperimentTaskConfiguraitonImpl();
    return experimentTaskConfiguraiton;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentFlow createExperimentFlow()
  {
    ExperimentFlowImpl experimentFlow = new ExperimentFlowImpl();
    return experimentFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentNode createExperimentNode()
  {
    ExperimentNodeImpl experimentNode = new ExperimentNodeImpl();
    return experimentNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularExpLink createRegularExpLink()
  {
    RegularExpLinkImpl regularExpLink = new RegularExpLinkImpl();
    return regularExpLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParallelNodes createParallelNodes()
  {
    ParallelNodesImpl parallelNodes = new ParallelNodesImpl();
    return parallelNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalExpLink createConditionalExpLink()
  {
    ConditionalExpLinkImpl conditionalExpLink = new ConditionalExpLinkImpl();
    return conditionalExpLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveType createPrimitiveType()
  {
    PrimitiveTypeImpl primitiveType = new PrimitiveTypeImpl();
    return primitiveType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventValue createEventValueFromString(EDataType eDataType, String initialValue)
  {
    EventValue result = EventValue.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventValueToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetricKind createMetricKindFromString(EDataType eDataType, String initialValue)
  {
    MetricKind result = MetricKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMetricKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XDSLPackage getXDSLPackage()
  {
    return (XDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XDSLPackage getPackage()
  {
    return XDSLPackage.eINSTANCE;
  }

} //XDSLFactoryImpl
