/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.xDSL.impl;

import cz.smartarch.yamas.dsl.xDSL.ExperimentNode;
import cz.smartarch.yamas.dsl.xDSL.ParallelNodes;
import cz.smartarch.yamas.dsl.xDSL.RegularExpLink;
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Regular Exp Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.RegularExpLinkImpl#isStarted <em>Started</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.RegularExpLinkImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.RegularExpLinkImpl#getParallelNodes <em>Parallel Nodes</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.RegularExpLinkImpl#isEnded <em>Ended</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RegularExpLinkImpl extends ExperimentFlowImpl implements RegularExpLink
{
  /**
   * The default value of the '{@link #isStarted() <em>Started</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStarted()
   * @generated
   * @ordered
   */
  protected static final boolean STARTED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStarted() <em>Started</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStarted()
   * @generated
   * @ordered
   */
  protected boolean started = STARTED_EDEFAULT;

  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected EList<ExperimentNode> nodes;

  /**
   * The cached value of the '{@link #getParallelNodes() <em>Parallel Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParallelNodes()
   * @generated
   * @ordered
   */
  protected EList<ParallelNodes> parallelNodes;

  /**
   * The default value of the '{@link #isEnded() <em>Ended</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEnded()
   * @generated
   * @ordered
   */
  protected static final boolean ENDED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEnded() <em>Ended</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEnded()
   * @generated
   * @ordered
   */
  protected boolean ended = ENDED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RegularExpLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.REGULAR_EXP_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStarted()
  {
    return started;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStarted(boolean newStarted)
  {
    boolean oldStarted = started;
    started = newStarted;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.REGULAR_EXP_LINK__STARTED, oldStarted, started));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExperimentNode> getNodes()
  {
    if (nodes == null)
    {
      nodes = new EObjectResolvingEList<ExperimentNode>(ExperimentNode.class, this, XDSLPackage.REGULAR_EXP_LINK__NODES);
    }
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParallelNodes> getParallelNodes()
  {
    if (parallelNodes == null)
    {
      parallelNodes = new EObjectContainmentEList<ParallelNodes>(ParallelNodes.class, this, XDSLPackage.REGULAR_EXP_LINK__PARALLEL_NODES);
    }
    return parallelNodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEnded()
  {
    return ended;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnded(boolean newEnded)
  {
    boolean oldEnded = ended;
    ended = newEnded;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.REGULAR_EXP_LINK__ENDED, oldEnded, ended));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDSLPackage.REGULAR_EXP_LINK__PARALLEL_NODES:
        return ((InternalEList<?>)getParallelNodes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.REGULAR_EXP_LINK__STARTED:
        return isStarted();
      case XDSLPackage.REGULAR_EXP_LINK__NODES:
        return getNodes();
      case XDSLPackage.REGULAR_EXP_LINK__PARALLEL_NODES:
        return getParallelNodes();
      case XDSLPackage.REGULAR_EXP_LINK__ENDED:
        return isEnded();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.REGULAR_EXP_LINK__STARTED:
        setStarted((Boolean)newValue);
        return;
      case XDSLPackage.REGULAR_EXP_LINK__NODES:
        getNodes().clear();
        getNodes().addAll((Collection<? extends ExperimentNode>)newValue);
        return;
      case XDSLPackage.REGULAR_EXP_LINK__PARALLEL_NODES:
        getParallelNodes().clear();
        getParallelNodes().addAll((Collection<? extends ParallelNodes>)newValue);
        return;
      case XDSLPackage.REGULAR_EXP_LINK__ENDED:
        setEnded((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.REGULAR_EXP_LINK__STARTED:
        setStarted(STARTED_EDEFAULT);
        return;
      case XDSLPackage.REGULAR_EXP_LINK__NODES:
        getNodes().clear();
        return;
      case XDSLPackage.REGULAR_EXP_LINK__PARALLEL_NODES:
        getParallelNodes().clear();
        return;
      case XDSLPackage.REGULAR_EXP_LINK__ENDED:
        setEnded(ENDED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.REGULAR_EXP_LINK__STARTED:
        return started != STARTED_EDEFAULT;
      case XDSLPackage.REGULAR_EXP_LINK__NODES:
        return nodes != null && !nodes.isEmpty();
      case XDSLPackage.REGULAR_EXP_LINK__PARALLEL_NODES:
        return parallelNodes != null && !parallelNodes.isEmpty();
      case XDSLPackage.REGULAR_EXP_LINK__ENDED:
        return ended != ENDED_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (started: ");
    result.append(started);
    result.append(", ended: ");
    result.append(ended);
    result.append(')');
    return result.toString();
  }

} //RegularExpLinkImpl
