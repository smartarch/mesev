/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.xDSL.util;

import cz.smartarch.yamas.dsl.xDSL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see cz.smartarch.yamas.dsl.xDSL.XDSLPackage
 * @generated
 */
public class XDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XDSLSwitch<Adapter> modelSwitch =
    new XDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseRoot(Root object)
      {
        return createRootAdapter();
      }
      @Override
      public Adapter caseWorkflow(Workflow object)
      {
        return createWorkflowAdapter();
      }
      @Override
      public Adapter caseData(Data object)
      {
        return createDataAdapter();
      }
      @Override
      public Adapter caseInputData(InputData object)
      {
        return createInputDataAdapter();
      }
      @Override
      public Adapter caseOutputData(OutputData object)
      {
        return createOutputDataAdapter();
      }
      @Override
      public Adapter caseDataConfiguration(DataConfiguration object)
      {
        return createDataConfigurationAdapter();
      }
      @Override
      public Adapter caseDataLink(DataLink object)
      {
        return createDataLinkAdapter();
      }
      @Override
      public Adapter caseCompositeWorkflow(CompositeWorkflow object)
      {
        return createCompositeWorkflowAdapter();
      }
      @Override
      public Adapter caseNode(Node object)
      {
        return createNodeAdapter();
      }
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter caseMetaData(MetaData object)
      {
        return createMetaDataAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseOperator(Operator object)
      {
        return createOperatorAdapter();
      }
      @Override
      public Adapter caseJoin(Join object)
      {
        return createJoinAdapter();
      }
      @Override
      public Adapter caseParallel(Parallel object)
      {
        return createParallelAdapter();
      }
      @Override
      public Adapter caseExclusive(Exclusive object)
      {
        return createExclusiveAdapter();
      }
      @Override
      public Adapter caseInclusive(Inclusive object)
      {
        return createInclusiveAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseCase(Case object)
      {
        return createCaseAdapter();
      }
      @Override
      public Adapter caseLink(Link object)
      {
        return createLinkAdapter();
      }
      @Override
      public Adapter caseNodeLink(NodeLink object)
      {
        return createNodeLinkAdapter();
      }
      @Override
      public Adapter caseConditionalLink(ConditionalLink object)
      {
        return createConditionalLinkAdapter();
      }
      @Override
      public Adapter caseRegularLink(RegularLink object)
      {
        return createRegularLinkAdapter();
      }
      @Override
      public Adapter caseRegularLinks(RegularLinks object)
      {
        return createRegularLinksAdapter();
      }
      @Override
      public Adapter caseExceptionalLink(ExceptionalLink object)
      {
        return createExceptionalLinkAdapter();
      }
      @Override
      public Adapter caseGroup(Group object)
      {
        return createGroupAdapter();
      }
      @Override
      public Adapter caseAssembledWorkflow(AssembledWorkflow object)
      {
        return createAssembledWorkflowAdapter();
      }
      @Override
      public Adapter caseSubstitutedTask(SubstitutedTask object)
      {
        return createSubstitutedTaskAdapter();
      }
      @Override
      public Adapter caseTaskSpecification(TaskSpecification object)
      {
        return createTaskSpecificationAdapter();
      }
      @Override
      public Adapter caseDependency(Dependency object)
      {
        return createDependencyAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseParam(Param object)
      {
        return createParamAdapter();
      }
      @Override
      public Adapter caseParamValue(ParamValue object)
      {
        return createParamValueAdapter();
      }
      @Override
      public Adapter caseParamValueRange(ParamValueRange object)
      {
        return createParamValueRangeAdapter();
      }
      @Override
      public Adapter caseParamValueEnum(ParamValueEnum object)
      {
        return createParamValueEnumAdapter();
      }
      @Override
      public Adapter caseParamValueList(ParamValueList object)
      {
        return createParamValueListAdapter();
      }
      @Override
      public Adapter caseParameterType(ParameterType object)
      {
        return createParameterTypeAdapter();
      }
      @Override
      public Adapter caseStructure(Structure object)
      {
        return createStructureAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseArray(Array object)
      {
        return createArrayAdapter();
      }
      @Override
      public Adapter caseMetric(Metric object)
      {
        return createMetricAdapter();
      }
      @Override
      public Adapter caseExperiment(Experiment object)
      {
        return createExperimentAdapter();
      }
      @Override
      public Adapter caseControl(Control object)
      {
        return createControlAdapter();
      }
      @Override
      public Adapter caseExperimentStep(ExperimentStep object)
      {
        return createExperimentStepAdapter();
      }
      @Override
      public Adapter caseExperimentTask(ExperimentTask object)
      {
        return createExperimentTaskAdapter();
      }
      @Override
      public Adapter caseInteraction(Interaction object)
      {
        return createInteractionAdapter();
      }
      @Override
      public Adapter caseExperimentSpace(ExperimentSpace object)
      {
        return createExperimentSpaceAdapter();
      }
      @Override
      public Adapter caseTaskConfiguration(TaskConfiguration object)
      {
        return createTaskConfigurationAdapter();
      }
      @Override
      public Adapter caseActionArgument(ActionArgument object)
      {
        return createActionArgumentAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseExperimentTaskConfiguraitonBody(ExperimentTaskConfiguraitonBody object)
      {
        return createExperimentTaskConfiguraitonBodyAdapter();
      }
      @Override
      public Adapter caseExperimentTaskConfiguraiton(ExperimentTaskConfiguraiton object)
      {
        return createExperimentTaskConfiguraitonAdapter();
      }
      @Override
      public Adapter caseExperimentFlow(ExperimentFlow object)
      {
        return createExperimentFlowAdapter();
      }
      @Override
      public Adapter caseExperimentNode(ExperimentNode object)
      {
        return createExperimentNodeAdapter();
      }
      @Override
      public Adapter caseRegularExpLink(RegularExpLink object)
      {
        return createRegularExpLinkAdapter();
      }
      @Override
      public Adapter caseParallelNodes(ParallelNodes object)
      {
        return createParallelNodesAdapter();
      }
      @Override
      public Adapter caseConditionalExpLink(ConditionalExpLink object)
      {
        return createConditionalExpLinkAdapter();
      }
      @Override
      public Adapter casePrimitiveType(PrimitiveType object)
      {
        return createPrimitiveTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Root <em>Root</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Root
   * @generated
   */
  public Adapter createRootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Workflow <em>Workflow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Workflow
   * @generated
   */
  public Adapter createWorkflowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Data <em>Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Data
   * @generated
   */
  public Adapter createDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.InputData <em>Input Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.InputData
   * @generated
   */
  public Adapter createInputDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.OutputData <em>Output Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.OutputData
   * @generated
   */
  public Adapter createOutputDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.DataConfiguration <em>Data Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.DataConfiguration
   * @generated
   */
  public Adapter createDataConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.DataLink <em>Data Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.DataLink
   * @generated
   */
  public Adapter createDataLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.CompositeWorkflow <em>Composite Workflow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.CompositeWorkflow
   * @generated
   */
  public Adapter createCompositeWorkflowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Node <em>Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Node
   * @generated
   */
  public Adapter createNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.MetaData <em>Meta Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.MetaData
   * @generated
   */
  public Adapter createMetaDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Operator <em>Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Operator
   * @generated
   */
  public Adapter createOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Join <em>Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Join
   * @generated
   */
  public Adapter createJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Parallel <em>Parallel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Parallel
   * @generated
   */
  public Adapter createParallelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Exclusive <em>Exclusive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Exclusive
   * @generated
   */
  public Adapter createExclusiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Inclusive <em>Inclusive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Inclusive
   * @generated
   */
  public Adapter createInclusiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Case <em>Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Case
   * @generated
   */
  public Adapter createCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Link <em>Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Link
   * @generated
   */
  public Adapter createLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.NodeLink <em>Node Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.NodeLink
   * @generated
   */
  public Adapter createNodeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ConditionalLink <em>Conditional Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ConditionalLink
   * @generated
   */
  public Adapter createConditionalLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.RegularLink <em>Regular Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.RegularLink
   * @generated
   */
  public Adapter createRegularLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.RegularLinks <em>Regular Links</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.RegularLinks
   * @generated
   */
  public Adapter createRegularLinksAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExceptionalLink <em>Exceptional Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExceptionalLink
   * @generated
   */
  public Adapter createExceptionalLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Group <em>Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Group
   * @generated
   */
  public Adapter createGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.AssembledWorkflow <em>Assembled Workflow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.AssembledWorkflow
   * @generated
   */
  public Adapter createAssembledWorkflowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.SubstitutedTask <em>Substituted Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.SubstitutedTask
   * @generated
   */
  public Adapter createSubstitutedTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.TaskSpecification <em>Task Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.TaskSpecification
   * @generated
   */
  public Adapter createTaskSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Dependency <em>Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Dependency
   * @generated
   */
  public Adapter createDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Param <em>Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Param
   * @generated
   */
  public Adapter createParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ParamValue <em>Param Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ParamValue
   * @generated
   */
  public Adapter createParamValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ParamValueRange <em>Param Value Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ParamValueRange
   * @generated
   */
  public Adapter createParamValueRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ParamValueEnum <em>Param Value Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ParamValueEnum
   * @generated
   */
  public Adapter createParamValueEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ParamValueList <em>Param Value List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ParamValueList
   * @generated
   */
  public Adapter createParamValueListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ParameterType <em>Parameter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ParameterType
   * @generated
   */
  public Adapter createParameterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Structure <em>Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Structure
   * @generated
   */
  public Adapter createStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Array <em>Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Array
   * @generated
   */
  public Adapter createArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Metric <em>Metric</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Metric
   * @generated
   */
  public Adapter createMetricAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Experiment <em>Experiment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Experiment
   * @generated
   */
  public Adapter createExperimentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Control <em>Control</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Control
   * @generated
   */
  public Adapter createControlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentStep <em>Experiment Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentStep
   * @generated
   */
  public Adapter createExperimentStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentTask <em>Experiment Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentTask
   * @generated
   */
  public Adapter createExperimentTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Interaction <em>Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Interaction
   * @generated
   */
  public Adapter createInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentSpace <em>Experiment Space</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentSpace
   * @generated
   */
  public Adapter createExperimentSpaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.TaskConfiguration <em>Task Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.TaskConfiguration
   * @generated
   */
  public Adapter createTaskConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ActionArgument <em>Action Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ActionArgument
   * @generated
   */
  public Adapter createActionArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentTaskConfiguraitonBody <em>Experiment Task Configuraiton Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentTaskConfiguraitonBody
   * @generated
   */
  public Adapter createExperimentTaskConfiguraitonBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentTaskConfiguraiton <em>Experiment Task Configuraiton</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentTaskConfiguraiton
   * @generated
   */
  public Adapter createExperimentTaskConfiguraitonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentFlow <em>Experiment Flow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentFlow
   * @generated
   */
  public Adapter createExperimentFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ExperimentNode <em>Experiment Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ExperimentNode
   * @generated
   */
  public Adapter createExperimentNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.RegularExpLink <em>Regular Exp Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.RegularExpLink
   * @generated
   */
  public Adapter createRegularExpLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ParallelNodes <em>Parallel Nodes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ParallelNodes
   * @generated
   */
  public Adapter createParallelNodesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.ConditionalExpLink <em>Conditional Exp Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.ConditionalExpLink
   * @generated
   */
  public Adapter createConditionalExpLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cz.smartarch.yamas.dsl.xDSL.PrimitiveType <em>Primitive Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cz.smartarch.yamas.dsl.xDSL.PrimitiveType
   * @generated
   */
  public Adapter createPrimitiveTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XDSLAdapterFactory
