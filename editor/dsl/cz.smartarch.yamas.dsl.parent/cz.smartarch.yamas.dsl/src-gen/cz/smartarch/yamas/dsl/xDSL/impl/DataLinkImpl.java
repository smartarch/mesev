/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.xDSL.impl;

import cz.smartarch.yamas.dsl.xDSL.Data;
import cz.smartarch.yamas.dsl.xDSL.DataLink;
import cz.smartarch.yamas.dsl.xDSL.Task;
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.DataLinkImpl#getInputDataTask <em>Input Data Task</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.DataLinkImpl#isAsInputTask <em>As Input Task</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.DataLinkImpl#getInputData <em>Input Data</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.DataLinkImpl#getOutputDataTask <em>Output Data Task</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.DataLinkImpl#isAsOutputTask <em>As Output Task</em>}</li>
 *   <li>{@link cz.smartarch.yamas.dsl.xDSL.impl.DataLinkImpl#getOutputData <em>Output Data</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataLinkImpl extends MinimalEObjectImpl.Container implements DataLink
{
  /**
   * The cached value of the '{@link #getInputDataTask() <em>Input Data Task</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputDataTask()
   * @generated
   * @ordered
   */
  protected Task inputDataTask;

  /**
   * The default value of the '{@link #isAsInputTask() <em>As Input Task</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsInputTask()
   * @generated
   * @ordered
   */
  protected static final boolean AS_INPUT_TASK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAsInputTask() <em>As Input Task</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsInputTask()
   * @generated
   * @ordered
   */
  protected boolean asInputTask = AS_INPUT_TASK_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputData() <em>Input Data</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputData()
   * @generated
   * @ordered
   */
  protected Data inputData;

  /**
   * The cached value of the '{@link #getOutputDataTask() <em>Output Data Task</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputDataTask()
   * @generated
   * @ordered
   */
  protected Task outputDataTask;

  /**
   * The default value of the '{@link #isAsOutputTask() <em>As Output Task</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsOutputTask()
   * @generated
   * @ordered
   */
  protected static final boolean AS_OUTPUT_TASK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAsOutputTask() <em>As Output Task</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsOutputTask()
   * @generated
   * @ordered
   */
  protected boolean asOutputTask = AS_OUTPUT_TASK_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutputData() <em>Output Data</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputData()
   * @generated
   * @ordered
   */
  protected Data outputData;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataLinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.DATA_LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task getInputDataTask()
  {
    if (inputDataTask != null && inputDataTask.eIsProxy())
    {
      InternalEObject oldInputDataTask = (InternalEObject)inputDataTask;
      inputDataTask = (Task)eResolveProxy(oldInputDataTask);
      if (inputDataTask != oldInputDataTask)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.DATA_LINK__INPUT_DATA_TASK, oldInputDataTask, inputDataTask));
      }
    }
    return inputDataTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task basicGetInputDataTask()
  {
    return inputDataTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInputDataTask(Task newInputDataTask)
  {
    Task oldInputDataTask = inputDataTask;
    inputDataTask = newInputDataTask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.DATA_LINK__INPUT_DATA_TASK, oldInputDataTask, inputDataTask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAsInputTask()
  {
    return asInputTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsInputTask(boolean newAsInputTask)
  {
    boolean oldAsInputTask = asInputTask;
    asInputTask = newAsInputTask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.DATA_LINK__AS_INPUT_TASK, oldAsInputTask, asInputTask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Data getInputData()
  {
    if (inputData != null && inputData.eIsProxy())
    {
      InternalEObject oldInputData = (InternalEObject)inputData;
      inputData = (Data)eResolveProxy(oldInputData);
      if (inputData != oldInputData)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.DATA_LINK__INPUT_DATA, oldInputData, inputData));
      }
    }
    return inputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Data basicGetInputData()
  {
    return inputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInputData(Data newInputData)
  {
    Data oldInputData = inputData;
    inputData = newInputData;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.DATA_LINK__INPUT_DATA, oldInputData, inputData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task getOutputDataTask()
  {
    if (outputDataTask != null && outputDataTask.eIsProxy())
    {
      InternalEObject oldOutputDataTask = (InternalEObject)outputDataTask;
      outputDataTask = (Task)eResolveProxy(oldOutputDataTask);
      if (outputDataTask != oldOutputDataTask)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.DATA_LINK__OUTPUT_DATA_TASK, oldOutputDataTask, outputDataTask));
      }
    }
    return outputDataTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task basicGetOutputDataTask()
  {
    return outputDataTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutputDataTask(Task newOutputDataTask)
  {
    Task oldOutputDataTask = outputDataTask;
    outputDataTask = newOutputDataTask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.DATA_LINK__OUTPUT_DATA_TASK, oldOutputDataTask, outputDataTask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAsOutputTask()
  {
    return asOutputTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsOutputTask(boolean newAsOutputTask)
  {
    boolean oldAsOutputTask = asOutputTask;
    asOutputTask = newAsOutputTask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.DATA_LINK__AS_OUTPUT_TASK, oldAsOutputTask, asOutputTask));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Data getOutputData()
  {
    if (outputData != null && outputData.eIsProxy())
    {
      InternalEObject oldOutputData = (InternalEObject)outputData;
      outputData = (Data)eResolveProxy(oldOutputData);
      if (outputData != oldOutputData)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.DATA_LINK__OUTPUT_DATA, oldOutputData, outputData));
      }
    }
    return outputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Data basicGetOutputData()
  {
    return outputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutputData(Data newOutputData)
  {
    Data oldOutputData = outputData;
    outputData = newOutputData;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.DATA_LINK__OUTPUT_DATA, oldOutputData, outputData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.DATA_LINK__INPUT_DATA_TASK:
        if (resolve) return getInputDataTask();
        return basicGetInputDataTask();
      case XDSLPackage.DATA_LINK__AS_INPUT_TASK:
        return isAsInputTask();
      case XDSLPackage.DATA_LINK__INPUT_DATA:
        if (resolve) return getInputData();
        return basicGetInputData();
      case XDSLPackage.DATA_LINK__OUTPUT_DATA_TASK:
        if (resolve) return getOutputDataTask();
        return basicGetOutputDataTask();
      case XDSLPackage.DATA_LINK__AS_OUTPUT_TASK:
        return isAsOutputTask();
      case XDSLPackage.DATA_LINK__OUTPUT_DATA:
        if (resolve) return getOutputData();
        return basicGetOutputData();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.DATA_LINK__INPUT_DATA_TASK:
        setInputDataTask((Task)newValue);
        return;
      case XDSLPackage.DATA_LINK__AS_INPUT_TASK:
        setAsInputTask((Boolean)newValue);
        return;
      case XDSLPackage.DATA_LINK__INPUT_DATA:
        setInputData((Data)newValue);
        return;
      case XDSLPackage.DATA_LINK__OUTPUT_DATA_TASK:
        setOutputDataTask((Task)newValue);
        return;
      case XDSLPackage.DATA_LINK__AS_OUTPUT_TASK:
        setAsOutputTask((Boolean)newValue);
        return;
      case XDSLPackage.DATA_LINK__OUTPUT_DATA:
        setOutputData((Data)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.DATA_LINK__INPUT_DATA_TASK:
        setInputDataTask((Task)null);
        return;
      case XDSLPackage.DATA_LINK__AS_INPUT_TASK:
        setAsInputTask(AS_INPUT_TASK_EDEFAULT);
        return;
      case XDSLPackage.DATA_LINK__INPUT_DATA:
        setInputData((Data)null);
        return;
      case XDSLPackage.DATA_LINK__OUTPUT_DATA_TASK:
        setOutputDataTask((Task)null);
        return;
      case XDSLPackage.DATA_LINK__AS_OUTPUT_TASK:
        setAsOutputTask(AS_OUTPUT_TASK_EDEFAULT);
        return;
      case XDSLPackage.DATA_LINK__OUTPUT_DATA:
        setOutputData((Data)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.DATA_LINK__INPUT_DATA_TASK:
        return inputDataTask != null;
      case XDSLPackage.DATA_LINK__AS_INPUT_TASK:
        return asInputTask != AS_INPUT_TASK_EDEFAULT;
      case XDSLPackage.DATA_LINK__INPUT_DATA:
        return inputData != null;
      case XDSLPackage.DATA_LINK__OUTPUT_DATA_TASK:
        return outputDataTask != null;
      case XDSLPackage.DATA_LINK__AS_OUTPUT_TASK:
        return asOutputTask != AS_OUTPUT_TASK_EDEFAULT;
      case XDSLPackage.DATA_LINK__OUTPUT_DATA:
        return outputData != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (asInputTask: ");
    result.append(asInputTask);
    result.append(", asOutputTask: ");
    result.append(asOutputTask);
    result.append(')');
    return result.toString();
  }

} //DataLinkImpl
