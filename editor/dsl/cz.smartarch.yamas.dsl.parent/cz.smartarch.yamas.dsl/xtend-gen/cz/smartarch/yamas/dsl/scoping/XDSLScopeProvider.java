/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.scoping;

import cz.smartarch.yamas.dsl.xDSL.AssembledWorkflow;
import cz.smartarch.yamas.dsl.xDSL.CompositeWorkflow;
import cz.smartarch.yamas.dsl.xDSL.Data;
import cz.smartarch.yamas.dsl.xDSL.DataLink;
import cz.smartarch.yamas.dsl.xDSL.ExperimentSpace;
import cz.smartarch.yamas.dsl.xDSL.Node;
import cz.smartarch.yamas.dsl.xDSL.SubstitutedTask;
import cz.smartarch.yamas.dsl.xDSL.Task;
import cz.smartarch.yamas.dsl.xDSL.TaskConfiguration;
import cz.smartarch.yamas.dsl.xDSL.Workflow;
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage;
import java.io.File;
import java.util.ArrayList;
import java.util.Objects;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class XDSLScopeProvider extends AbstractXDSLScopeProvider {
  public CompositeWorkflow getParentWorkflow(final Workflow workflow) {
    if ((workflow instanceof CompositeWorkflow)) {
      return ((CompositeWorkflow)workflow);
    }
    Workflow wf = workflow;
    while ((wf instanceof AssembledWorkflow)) {
      wf = ((AssembledWorkflow) wf).getParent();
    }
    if ((wf instanceof CompositeWorkflow)) {
      return ((CompositeWorkflow)wf);
    } else {
      return null;
    }
  }

  public URI getNewURI(final EObject context, final String implementation) {
    final URI originalURI = context.eResource().getURI();
    boolean _isFile = originalURI.isFile();
    if (_isFile) {
      final String originalFilePath = originalURI.toFileString();
      final String baseDir = new File(originalFilePath).getParent();
      final File newFile = new File(baseDir, implementation);
      return URI.createFileURI(newFile.getAbsolutePath());
    } else {
      String _path = context.eResource().getURI().path();
      String _segment = context.eResource().getURI().segment(0);
      String _plus = (_segment + "/");
      String newuri = _path.replace(_plus, "").replace(context.eResource().getURI().lastSegment(), implementation);
      return URI.createFileURI(newuri);
    }
  }

  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof SubstitutedTask)) {
      boolean _equals = Objects.equals(reference, XDSLPackage.Literals.SUBSTITUTED_TASK__NAME);
      if (_equals) {
        EObject assembledWorkflow = ((SubstitutedTask)context).eContainer();
        if ((assembledWorkflow instanceof AssembledWorkflow)) {
          CompositeWorkflow parentWorkflow = this.getParentWorkflow(((Workflow)assembledWorkflow));
          if ((parentWorkflow instanceof CompositeWorkflow)) {
            final Function1<Node, Boolean> _function = (Node n) -> {
              return Boolean.valueOf((n instanceof Task));
            };
            return Scopes.scopeFor(IterableExtensions.<Node>filter(parentWorkflow.getNodes(), _function));
          }
        }
      }
    }
    if ((context instanceof TaskConfiguration)) {
      boolean _equals_1 = Objects.equals(reference, XDSLPackage.Literals.TASK_CONFIGURATION__TASK);
      if (_equals_1) {
        EObject experimentSpace = ((TaskConfiguration)context).eContainer();
        if ((experimentSpace instanceof ExperimentSpace)) {
          Workflow _assembledWorkflow = ((ExperimentSpace)experimentSpace).getAssembledWorkflow();
          boolean _tripleNotEquals = (_assembledWorkflow != null);
          if (_tripleNotEquals) {
            CompositeWorkflow wf = this.getParentWorkflow(((ExperimentSpace)experimentSpace).getAssembledWorkflow());
            final Function1<Node, Boolean> _function_1 = (Node n) -> {
              return Boolean.valueOf((n instanceof Task));
            };
            return Scopes.scopeFor(IterableExtensions.<Node>filter(wf.getNodes(), _function_1));
          }
        }
      }
    }
    boolean _equals_2 = Objects.equals(reference, XDSLPackage.Literals.DATA_LINK__INPUT_DATA);
    if (_equals_2) {
      if ((context instanceof DataLink)) {
        boolean _isAsInputTask = ((DataLink)context).isAsInputTask();
        if (_isAsInputTask) {
          Task _inputDataTask = ((DataLink)context).getInputDataTask();
          boolean _tripleNotEquals_1 = (_inputDataTask != null);
          if (_tripleNotEquals_1) {
            final Task inputDataTask = ((DataLink)context).getInputDataTask();
            final ArrayList<String> implementations = CollectionLiterals.<String>newArrayList();
            String _primitiveImplementation = inputDataTask.getPrimitiveImplementation();
            boolean _tripleNotEquals_2 = (_primitiveImplementation != null);
            if (_tripleNotEquals_2) {
              String _primitiveImplementation_1 = inputDataTask.getPrimitiveImplementation();
              implementations.add(_primitiveImplementation_1);
            }
            final Function1<Object, Boolean> _function_2 = (Object e) -> {
              return Boolean.valueOf((e instanceof SubstitutedTask));
            };
            final Function1<Object, Boolean> _function_3 = (Object e) -> {
              Task _name = ((SubstitutedTask) e).getName();
              return Boolean.valueOf(Objects.equals(_name, inputDataTask));
            };
            final Procedure1<Object> _function_4 = (Object stask) -> {
              String _primitiveImplementation_2 = ((SubstitutedTask) stask).getPrimitiveImplementation();
              implementations.add(_primitiveImplementation_2);
            };
            IteratorExtensions.<Object>forEach(IteratorExtensions.<Object>filter(IteratorExtensions.<Object>filter(EcoreUtil2.<Object>getAllContents(((DataLink)context).eResource().getResourceSet(), true), _function_2), _function_3), _function_4);
            final ArrayList<EObject> inputs = CollectionLiterals.<EObject>newArrayList();
            final Consumer<String> _function_5 = (String implementation) -> {
              URI uri = this.getNewURI(context, implementation);
              try {
                final Resource resource = ((DataLink)context).eResource().getResourceSet().getResource(uri, true);
                final Function1<Object, Boolean> _function_6 = (Object e) -> {
                  return Boolean.valueOf((e instanceof Data));
                };
                final Procedure1<Object> _function_7 = (Object outputData) -> {
                  inputs.add(((EObject) outputData));
                };
                IteratorExtensions.<Object>forEach(IteratorExtensions.<Object>filter(EcoreUtil2.<Object>getAllContents(resource, true), _function_6), _function_7);
              } catch (final Throwable _t) {
                if (_t instanceof Exception) {
                } else {
                  throw Exceptions.sneakyThrow(_t);
                }
              }
            };
            implementations.forEach(_function_5);
            return Scopes.scopeFor(inputs);
          }
        }
      }
    }
    boolean _equals_3 = Objects.equals(reference, XDSLPackage.Literals.DATA_LINK__OUTPUT_DATA);
    if (_equals_3) {
      if ((context instanceof DataLink)) {
        boolean _isAsOutputTask = ((DataLink)context).isAsOutputTask();
        if (_isAsOutputTask) {
          Task _outputDataTask = ((DataLink)context).getOutputDataTask();
          boolean _tripleNotEquals_3 = (_outputDataTask != null);
          if (_tripleNotEquals_3) {
            final Task outputDataTask = ((DataLink)context).getOutputDataTask();
            final ArrayList<String> implementations_1 = CollectionLiterals.<String>newArrayList();
            String _primitiveImplementation_2 = outputDataTask.getPrimitiveImplementation();
            boolean _tripleNotEquals_4 = (_primitiveImplementation_2 != null);
            if (_tripleNotEquals_4) {
              String _primitiveImplementation_3 = outputDataTask.getPrimitiveImplementation();
              implementations_1.add(_primitiveImplementation_3);
            }
            final Function1<Object, Boolean> _function_6 = (Object e) -> {
              return Boolean.valueOf((e instanceof SubstitutedTask));
            };
            final Function1<Object, Boolean> _function_7 = (Object e) -> {
              Task _name = ((SubstitutedTask) e).getName();
              return Boolean.valueOf(Objects.equals(_name, outputDataTask));
            };
            final Procedure1<Object> _function_8 = (Object stask) -> {
              String _primitiveImplementation_4 = ((SubstitutedTask) stask).getPrimitiveImplementation();
              implementations_1.add(_primitiveImplementation_4);
            };
            IteratorExtensions.<Object>forEach(IteratorExtensions.<Object>filter(IteratorExtensions.<Object>filter(EcoreUtil2.<Object>getAllContents(((DataLink)context).eResource().getResourceSet(), true), _function_6), _function_7), _function_8);
            final ArrayList<EObject> outputs = CollectionLiterals.<EObject>newArrayList();
            final Consumer<String> _function_9 = (String implementation) -> {
              URI uri = this.getNewURI(context, implementation);
              try {
                final Resource resource = ((DataLink)context).eResource().getResourceSet().getResource(uri, true);
                final Function1<Object, Boolean> _function_10 = (Object e) -> {
                  return Boolean.valueOf((e instanceof Data));
                };
                final Procedure1<Object> _function_11 = (Object outputData) -> {
                  outputs.add(((EObject) outputData));
                };
                IteratorExtensions.<Object>forEach(IteratorExtensions.<Object>filter(EcoreUtil2.<Object>getAllContents(resource, true), _function_10), _function_11);
              } catch (final Throwable _t) {
                if (_t instanceof Exception) {
                } else {
                  throw Exceptions.sneakyThrow(_t);
                }
              }
            };
            implementations_1.forEach(_function_9);
            return Scopes.scopeFor(outputs);
          }
        }
      }
    }
    return super.getScope(context, reference);
  }
}
