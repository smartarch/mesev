/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.validation;

import cz.smartarch.yamas.dsl.xDSL.SubstitutedTask;
import cz.smartarch.yamas.dsl.xDSL.Task;
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage;
import java.io.File;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class XDSLValidator extends AbstractXDSLValidator {
  public static final String NO_FILE = "noFile";

  public URI getNewURI(final EObject context, final String implementation) {
    final URI originalURI = context.eResource().getURI();
    boolean _isFile = originalURI.isFile();
    if (_isFile) {
      final String originalFilePath = originalURI.toFileString();
      final String baseDir = new File(originalFilePath).getParent();
      final File newFile = new File(baseDir, implementation);
      return URI.createFileURI(newFile.getAbsolutePath());
    } else {
      String _path = context.eResource().getURI().path();
      String _segment = context.eResource().getURI().segment(0);
      String _plus = (_segment + "/");
      String newuri = _path.replace(_plus, "").replace(context.eResource().getURI().lastSegment(), implementation);
      return URI.createFileURI(newuri);
    }
  }

  @Check
  public void checkSubstitutedTaskFileExist(final SubstitutedTask substitutedTask) {
    String _primitiveImplementation = substitutedTask.getPrimitiveImplementation();
    boolean _tripleNotEquals = (_primitiveImplementation != null);
    if (_tripleNotEquals) {
      URI newURI = this.getNewURI(substitutedTask, substitutedTask.getPrimitiveImplementation());
      try {
        final Resource resource = substitutedTask.eResource().getResourceSet().getResource(newURI, true);
        final TreeIterator<Object> contents = EcoreUtil2.<Object>getAllContents(resource, true);
        int _size = IteratorExtensions.size(contents);
        boolean _equals = (_size == 0);
        if (_equals) {
          String _primitiveImplementation_1 = substitutedTask.getPrimitiveImplementation();
          String _plus = ("file " + _primitiveImplementation_1);
          String _plus_1 = (_plus + " does not exist or empty");
          this.warning(_plus_1, 
            XDSLPackage.Literals.SUBSTITUTED_TASK__PRIMITIVE_IMPLEMENTATION, 
            XDSLValidator.NO_FILE);
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
          final Exception e = (Exception)_t;
          String _primitiveImplementation_2 = substitutedTask.getPrimitiveImplementation();
          String _plus_2 = ("file " + _primitiveImplementation_2);
          String _plus_3 = (_plus_2 + " does not exist\t -> ");
          String _message = e.getMessage();
          String _plus_4 = (_plus_3 + _message);
          String _plus_5 = (_plus_4 + " ");
          this.warning(_plus_5, 
            XDSLPackage.Literals.SUBSTITUTED_TASK__PRIMITIVE_IMPLEMENTATION, 
            XDSLValidator.NO_FILE);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    }
  }

  @Check
  public void checkTaskFileExist(final Task task) {
    String _primitiveImplementation = task.getPrimitiveImplementation();
    boolean _tripleNotEquals = (_primitiveImplementation != null);
    if (_tripleNotEquals) {
      URI newURI = this.getNewURI(task, task.getPrimitiveImplementation());
      try {
        final Resource resource = task.eResource().getResourceSet().getResource(newURI, true);
        final TreeIterator<Object> contents = EcoreUtil2.<Object>getAllContents(resource, true);
        int _size = IteratorExtensions.size(contents);
        boolean _equals = (_size == 0);
        if (_equals) {
          String _primitiveImplementation_1 = task.getPrimitiveImplementation();
          String _plus = ("file " + _primitiveImplementation_1);
          String _plus_1 = (_plus + " (");
          String _plus_2 = (_plus_1 + newURI);
          String _plus_3 = (_plus_2 + ") does not exist or empty");
          this.warning(_plus_3, 
            XDSLPackage.Literals.TASK__PRIMITIVE_IMPLEMENTATION, 
            XDSLValidator.NO_FILE);
        }
      } catch (final Throwable _t) {
        if (_t instanceof Exception) {
          final Exception e = (Exception)_t;
          String _primitiveImplementation_2 = task.getPrimitiveImplementation();
          String _plus_4 = ("file " + _primitiveImplementation_2);
          String _plus_5 = (_plus_4 + " does not exist -> ");
          String _message = e.getMessage();
          String _plus_6 = (_plus_5 + _message);
          String _plus_7 = (_plus_6 + " ");
          this.warning(_plus_7, 
            XDSLPackage.Literals.TASK__PRIMITIVE_IMPLEMENTATION, 
            XDSLValidator.NO_FILE);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    }
  }
}
