/*
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.scoping

import cz.smartarch.yamas.dsl.xDSL.Workflow
import cz.smartarch.yamas.dsl.xDSL.CompositeWorkflow
import cz.smartarch.yamas.dsl.xDSL.AssembledWorkflow
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage
import cz.smartarch.yamas.dsl.xDSL.SubstitutedTask
import org.eclipse.xtext.scoping.Scopes
import cz.smartarch.yamas.dsl.xDSL.Task
import cz.smartarch.yamas.dsl.xDSL.DataLink
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.common.util.URI
import cz.smartarch.yamas.dsl.xDSL.Data
import cz.smartarch.yamas.dsl.xDSL.TaskConfiguration
import cz.smartarch.yamas.dsl.xDSL.ExperimentSpace
import java.io.File

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class XDSLScopeProvider extends AbstractXDSLScopeProvider {
	
	def getParentWorkflow(Workflow workflow){
		if (workflow instanceof CompositeWorkflow){
			return workflow
		}
		var wf = workflow
		while (wf instanceof AssembledWorkflow){
			wf = (wf as AssembledWorkflow).parent
		}
		
		if (wf instanceof CompositeWorkflow) {
			return wf
		}
		else {
			return null
		}
		
	}
	
		
	def getNewURI(EObject context, String implementation) {
	    val originalURI = context.eResource.URI
	    if (originalURI.file){
	    	val originalFilePath = originalURI.toFileString
			val baseDir = new File(originalFilePath).getParent
			val newFile = new File(baseDir, implementation)
			return URI.createFileURI(newFile.absolutePath)
	    	
	    }else{
	    	var newuri = context.eResource.URI.path
				.replace(context.eResource.URI.segment(0)+"/",'')
				.replace(context.eResource.URI.lastSegment, implementation)
			return URI.createFileURI(newuri)
	    }
	    
	}

	
	override getScope(EObject context, EReference reference){
		
		if (context instanceof SubstitutedTask){
			if (reference == XDSLPackage.Literals.SUBSTITUTED_TASK__NAME){
				var assembledWorkflow = context.eContainer
				if (assembledWorkflow instanceof AssembledWorkflow){
					var parentWorkflow = getParentWorkflow(assembledWorkflow)
					if (parentWorkflow instanceof CompositeWorkflow){
						return Scopes.scopeFor(parentWorkflow.nodes.filter[n | n instanceof Task])
					}
				}
			}
		}
		
		if (context instanceof TaskConfiguration){
			if (reference == XDSLPackage.Literals.TASK_CONFIGURATION__TASK){
				var experimentSpace = context.eContainer
				if (experimentSpace instanceof ExperimentSpace){
					if (experimentSpace.assembledWorkflow !== null){
						var wf = getParentWorkflow(experimentSpace.assembledWorkflow)
						return Scopes.scopeFor(wf.nodes.filter[n | n instanceof Task])
					}
				}
			}
		}		
		
		if (reference == XDSLPackage.Literals.DATA_LINK__INPUT_DATA){
			if (context instanceof DataLink){
				if (context.isAsInputTask){
					if (context.inputDataTask !== null){
						val inputDataTask = context.inputDataTask
						val implementations = newArrayList
						if (inputDataTask.primitiveImplementation !== null){
							implementations += inputDataTask.primitiveImplementation
						}

						
						EcoreUtil2.getAllContents(context.eResource.resourceSet, true)
							.filter[e| e instanceof SubstitutedTask]
							.filter[e | (e as SubstitutedTask).name == inputDataTask]
							.forEach[stask | implementations += (stask as SubstitutedTask).primitiveImplementation]
						
						val inputs = newArrayList
						implementations.forEach[ implementation |
							
							var uri = getNewURI(context, implementation)
							try {
								val resource = context.eResource.resourceSet.getResource(uri, true)
								
								EcoreUtil2.getAllContents(resource, true).filter[e | e instanceof Data].forEach[
									outputData | inputs += outputData as EObject
								]
							}
							catch (Exception e) {}
								
							]
							return Scopes.scopeFor(inputs)
					}
				}
			}
		}
		
		if (reference == XDSLPackage.Literals.DATA_LINK__OUTPUT_DATA){
			if (context instanceof DataLink){
				if (context.isAsOutputTask){
					if (context.outputDataTask !== null){
						val outputDataTask = context.outputDataTask
						val implementations = newArrayList
						if (outputDataTask.primitiveImplementation !== null){
							implementations += outputDataTask.primitiveImplementation
						}

						
						EcoreUtil2.getAllContents(context.eResource.resourceSet, true)
							.filter[e| e instanceof SubstitutedTask]
							.filter[e | (e as SubstitutedTask).name == outputDataTask]
							.forEach[stask | implementations += (stask as SubstitutedTask).primitiveImplementation]
						
						val outputs = newArrayList
						implementations.forEach[ implementation |
							
							var uri = getNewURI(context, implementation)
							try {
								val resource = context.eResource.resourceSet.getResource(uri, true)
								
								EcoreUtil2.getAllContents(resource, true).filter[e | e instanceof Data].forEach[
									outputData | outputs += outputData as EObject
								]
							}
							catch (Exception e) {}
								
							]
							return Scopes.scopeFor(outputs)
						}
						
					}
				}
			}
		

		return super.getScope(context, reference); 
	}
}
