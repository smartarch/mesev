/*
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package cz.smartarch.yamas.dsl.validation

import cz.smartarch.yamas.dsl.xDSL.SubstitutedTask
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import org.eclipse.emf.common.util.URI
import cz.smartarch.yamas.dsl.xDSL.XDSLPackage
import java.io.File
import org.eclipse.xtext.EcoreUtil2
import cz.smartarch.yamas.dsl.xDSL.Task

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XDSLValidator extends AbstractXDSLValidator {
	
	public static val NO_FILE = 'noFile'

	
	def getNewURI(EObject context, String implementation) {
	    val originalURI = context.eResource.URI
	    if (originalURI.file){
	    	val originalFilePath = originalURI.toFileString
			val baseDir = new File(originalFilePath).getParent
			val newFile = new File(baseDir, implementation)
			return URI.createFileURI(newFile.absolutePath)
	    	
	    }else{
	    	var newuri = context.eResource.URI.path
				.replace(context.eResource.URI.segment(0)+"/",'')
				.replace(context.eResource.URI.lastSegment, implementation)
			return URI.createFileURI(newuri)
	    }
	    
	}
	
	@Check
	def checkSubstitutedTaskFileExist(SubstitutedTask substitutedTask) {
		if (substitutedTask.primitiveImplementation !== null) {
			var newURI = getNewURI(substitutedTask, substitutedTask.primitiveImplementation);
			try {
				val resource = substitutedTask.eResource.resourceSet.getResource(newURI, true)
				val contents = EcoreUtil2.getAllContents(resource, true)
				if (contents.size == 0){
					warning('file '+ substitutedTask.primitiveImplementation + ' does not exist or empty', 
					XDSLPackage.Literals.SUBSTITUTED_TASK__PRIMITIVE_IMPLEMENTATION,
					NO_FILE)
				}
				
			}
			catch (Exception e) {
				warning('file '+ substitutedTask.primitiveImplementation + ' does not exist	 -> ' + e.message + " ", 
				XDSLPackage.Literals.SUBSTITUTED_TASK__PRIMITIVE_IMPLEMENTATION,
				NO_FILE)
			}
				
		}
	}
	
	@Check
	def checkTaskFileExist(Task task) {
		if (task.primitiveImplementation !== null) {
			var newURI = getNewURI(task, task.primitiveImplementation);
			try {
				val resource = task.eResource.resourceSet.getResource(newURI, true)
				
				val contents = EcoreUtil2.getAllContents(resource, true)
				if (contents.size == 0){
					warning('file '+ task.primitiveImplementation + ' (' + newURI + ') does not exist or empty', 
					XDSLPackage.Literals.TASK__PRIMITIVE_IMPLEMENTATION,
					NO_FILE)
				}
				
			}
			catch (Exception e) {
				warning('file '+ task.primitiveImplementation + ' does not exist -> ' + e.message + " ", 
				XDSLPackage.Literals.TASK__PRIMITIVE_IMPLEMENTATION,
				NO_FILE)
			}
				
		}
	}
}
