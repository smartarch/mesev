/*
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package com.mesev.dsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import com.mesev.dsl.xDSL.TaskConfiguration
import com.mesev.dsl.xDSL.XDSLPackage
import com.mesev.dsl.xDSL.Workflow
import com.mesev.dsl.xDSL.CompositeWorkflow
import com.mesev.dsl.xDSL.AssembledWorkflow
import org.eclipse.xtext.scoping.Scopes
import com.mesev.dsl.xDSL.ExperimentTaskConfiguraiton
import com.mesev.dsl.xDSL.Space

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class XDSLScopeProvider extends AbstractXDSLScopeProvider {
	
	
	def getParentWorkflow(Workflow workflow){
		if (workflow instanceof CompositeWorkflow){
			return workflow
		}
		var wf = workflow
		while (wf instanceof AssembledWorkflow){
			wf = (wf as AssembledWorkflow).parent
		}
		
		if (wf instanceof CompositeWorkflow) {
			return wf
		}
		else {
			return null
		}
		
	}
	
	override getScope(EObject context, EReference reference){
		if (context instanceof TaskConfiguration){
			if (reference == XDSLPackage.Literals.TASK_CONFIGURATION__TASK){
				var container = context.eContainer
				
				if (container instanceof AssembledWorkflow){
					var parentWorkflow = getParentWorkflow(container)
					
					if (parentWorkflow instanceof CompositeWorkflow){
						return Scopes.scopeFor(parentWorkflow.tasks)
					}
				}
			}
		}
		
		if (context instanceof ExperimentTaskConfiguraiton){
			if (reference == XDSLPackage.Literals.EXPERIMENT_TASK_CONFIGURAITON__TASK){
				var container = context.eContainer
				
				if (container instanceof Space){
					var parentWorkflow = getParentWorkflow(container.assembledWorkflow)
					
					if (parentWorkflow instanceof CompositeWorkflow){
						return Scopes.scopeFor(parentWorkflow.tasks)
					}
				}
			}
		}
		
		return super.getScope(context, reference); 
	}
}