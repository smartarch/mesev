grammar com.mesev.dsl.XDSL with org.eclipse.xtext.common.Terminals

generate xDSL "http://www.mesev.com/dsl/XDSL"


Root:
	(asPackage?= 'package' name=ID ';')?
	(
		workflows += Workflow		|
		groups += Group				|
		parameterTypes += ParameterType	|
		experiments += Experiment
	)* 
	
;

// workflow is an abstract class that can be extended by the following classes
Workflow:
	CompositeWorkflow | TaskSpecification | AssembledWorkflow
;



CompositeWorkflow:
	'workflow' name=ID '{'
		(
			// shared members (i.e. super members)
			inputs += InputData						|	
			outputs += OutputData					|
			
			// dedicated members
			tasks += Task							|
			dataConfigurations += DataConfiguration	|
			links += Link							|
			dataLinks += DataLink					|
			nodes += Node
		)*
	'}'
;

AssembledWorkflow:
	'workflow' name=ID 'from' parent=[Workflow] '{'
		(
			// shared members (i.e. super members)
			inputs += InputData			|
			outputs += OutputData 		|
			
			// dedicated members
			taskConfigurations += TaskConfiguration
		)*
	'}'
;

TaskSpecification:
	'task' name=ID '{'
		(
			// shared members (i.e. super members)
			inputs += InputData			|
			outputs += OutputData		| 		
			
			// dedicated members
			metrics += Metric			|
			parameters += Parameter 	|
			'implementation' implementation=STRING ';'	|
			'dependency' dependency=STRING ';'
		)*
	'}'
;

Node:
	Task | Event 
;


// Data
Data:
	InputData | OutputData
;
InputData:
	'define' 'input' 'data' name=ID ';'
;

OutputData:
	'define' 'output' 'data' name=ID ';' 
;

DataConfiguration:
	'configure' 'data' data=[Data] '{'
	('path' path=STRING ';' | 'type' type=STRING ';' | 'default' defaultValue=ParamValue ';'  )*
	
	'}'
;


Task:
	 (abstract?='task' name=ID ';') |
	 (configured?='task' name=ID taskConfiguration=TaskConfigurationBody) 
;

TaskConfigurationBody:
	{TaskConfigurationBody}'{'
	((
			// shared members (i.e. super members)
			inputs += InputData			|
			outputs += OutputData 		|	
			params += Param				|
			
			// special members
			('metadata''{' 	metadata += MetaData (',' metadata += MetaData)	 '}' )|
			
			// single members
			'description' description=STRING ';'		|
			'implementation' primitiveImplementation=STRING ';'	|
			'subworkflow' subworkflow=STRING ';'				|
			'dependency' dependency=STRING ';'
	
	)* 
	|
	(notImplemented = '...'))
	'}'
;

TaskConfiguration:
	'task' task=[Task|ID] taskConfiguration=TaskConfigurationBody
;

MetaData:
	name=STRING ':' value=STRING
;

// Event
Event:
	eventValue=EventValue	
;

enum EventValue:
	START='START' | END='END'
;


// Operator
Operator:
	Join | Parallel  | Exclusive | Inclusive 
;


terminal JOIN_TERM:
	'JOIN-'INT
;

terminal PARALLEL_TERM:
	'PARALLEL-'INT
;

terminal EXCLUSIVE_TERM:
	'EXCLUSIVE-'INT
;

terminal INCLUSIVE_TERM:
	'INCLUSIVE-'INT
;

Join :
    id=JOIN_TERM
 ;

Parallel :
	id=PARALLEL_TERM
;
Exclusive :
	id=EXCLUSIVE_TERM  
;

Inclusive :
	id=INCLUSIVE_TERM 
;


LinkableNode returns Node:
	ref=[Node] | Event | Operator
;

// Link
Link:
	ConditionalLink | RegularLink | ExceptionalLink
;


ConditionalLink:
	input=LinkableNode '?->' output=LinkableNode '{'
		(
			"condition" condition=STRING ';'	|
			"cases" cases+=Case+ 
		)
	'}'
;

RegularLink:
	( input=LinkableNode) ('->' ouput+=LinkableNode)+ ';'
;

ExceptionalLink:
	input=LinkableNode '!->' output=LinkableNode '{'
		"event" event=STRING ';'
	'}'
;

Case: 
	case=STRING target=[Node] ';'
;

// we have to remove abstract tasks
ComponentWithData:
	TaskConfiguration | Workflow 
;


DataConnection:
	(component=[ComponentWithData] fromComponent?='.')? ref=[Data]
;

// DataLink
// TODO
GlobalID:
	ID('.'ID)?
;
DataLink:
	inputData=GlobalID '-->' outputData=GlobalID';'
;

// Parameter and Metric
Parameter:
	'param' name=ID '{'
		(
			('type' type=ParameterType ';')? 	&
			('default' (defaultValueString=STRING | defaultValueInt=INT) ';')? &
			((rangeValue=ParamValueRange | enumValue= ParamValueEnum) ';')? &
			('constraint' valueConstraint=STRING ';')? 
			
		) 
	'}'
;

Metric:
	'metric' name=ID '{'
		(
			('type' type=ParameterType ';')? &
			('kind' kind=MetricKind ';')? 
		)
	'}'
;

enum MetricKind:
	series='series' | scalar='scalar'
;

// GROUP
Group:
	'group' name=ID '{'
		tasks += Task
	'}'
;

//ParameterType

ParameterType:
	Structure | PrimitiveType | Array
;

Structure:
	'struct' name=ID '{'
		fields += Field ';'
	'}'
;

Field:
	name=ID ('as' type=ParameterType)?
;

Array:
	name=ID '['length=INT']' ('as' type=ParameterType)?
;

PrimitiveType returns ParameterType:
	{PrimitiveType} ('Integer' | 'Boolean' | 'String' | 'Blob')
;





// Experiment DSL
Experiment:
    'experiment' name=ID '{'
    	('intent' intent=ID ';')?
        (
        	interactions += Interaction	| 
        	spaces += Space 			|
        	control = Control 			|
        	tasks += ExperimentTask 
        )* 
        
    '}'
;

Interaction:
	'interaction' name=ID '{'
	    (
			tasks += Action*	    	
 		|
			(notImplemented = '...')
		) 
	'}' 
;

ActionArgument:
	string=STRING | id=ID
;

Action:
	('action' actionName=ID '(' (arguments+=ActionArgument (',' arguments+=ActionArgument)*)? ')' ';')
	
;

Attribute:
	name=ID '=' attributeValue=ParamValue ';'
;

Space:
    'space' name=ID 'of' assembledWorkflow=[Workflow] '{'
		(
			( 
				'strategy' strategy=ID ';' 	|
				params += Param				|
				attributes += Attribute		|		
				taskConfigurations += ExperimentTaskConfiguraiton 
				
			)*
		|
			(notImplemented = '...')
		)  
        
    '}'
;

ExperimentTask:
	 (abstract?='task' name=ID ';') |
	 (configured?='task' name=ID taskConfiguration=TaskConfigurationBody) 
;

ExperimentTaskConfiguraitonBody:
	{ExperimentTaskConfiguraitonBody}'{'
	((
			// shared members (i.e. super members)
			params += Param
	
	)* 
	|
	(notImplemented = '...'))
	'}'
;

ExperimentTaskConfiguraiton:
	'task' task=[Task|ID] taskConfiguration=ExperimentTaskConfiguraitonBody
;

Param:
	'param' name=ID (assigned?='=' (value=ParamValue | ref=[Param|ID]))? ';' 
;

ParamValue:
	rangeValue=ParamValueRange | enumValue=ParamValueEnum | primitiveValue=PrimitiveValue | listValue=ParamValueList
;
ParamValueRange:
	'range' '('start=INT ',' end=INT (',' step=INT)?')'
;
ParamValueEnum:
	'enum' '(' values+=PrimitiveValue (',' values+=PrimitiveValue)* ')'
;
ParamValueList:
	'[' values+=PrimitiveValue (',' values+=PrimitiveValue)* ']'
;
PrimitiveValue:
	INT | STRING | FLOAT | BOOLEAN
;

terminal FLOAT:
	'-'? INT '.' INT
;


terminal BOOLEAN:
	'true' | 'false'
;

Control:
        {Control}'control' '{'
        (
			flows += ExperimentFlow*
			
			|
			(notImplemented = '...')
		)  
		'}'
;

ExperimentFlow:
	RegularExpLink | ConditionalExpLink
;

ExperimentNode:
	Space | Interaction | ExperimentTask
;

RegularExpLink:
	(started?='START' '->')?  
	(nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes) ('->' (nodes+=[ExperimentNode] | parallelNodes+=ParallelNodes))* 
	(ended?='->' 'END')? ';'
;
ParallelNodes:
	'(' nodes+=[ExperimentNode] ('||' nodes+=[ExperimentNode])+ ')' 
;

ConditionalExpLink:
    fromNode=[ExperimentNode] '?->' toNode=[ExperimentNode] '{' 'condition' condition=STRING '}' ';'
;
