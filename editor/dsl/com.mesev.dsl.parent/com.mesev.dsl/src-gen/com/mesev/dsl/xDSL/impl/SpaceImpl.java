/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package com.mesev.dsl.xDSL.impl;

import com.mesev.dsl.xDSL.Attribute;
import com.mesev.dsl.xDSL.ExperimentTaskConfiguraiton;
import com.mesev.dsl.xDSL.Param;
import com.mesev.dsl.xDSL.Space;
import com.mesev.dsl.xDSL.Workflow;
import com.mesev.dsl.xDSL.XDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Space</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mesev.dsl.xDSL.impl.SpaceImpl#getAssembledWorkflow <em>Assembled Workflow</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.SpaceImpl#getStrategy <em>Strategy</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.SpaceImpl#getParams <em>Params</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.SpaceImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.SpaceImpl#getTaskConfigurations <em>Task Configurations</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.SpaceImpl#getNotImplemented <em>Not Implemented</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpaceImpl extends ExperimentNodeImpl implements Space
{
  /**
   * The cached value of the '{@link #getAssembledWorkflow() <em>Assembled Workflow</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssembledWorkflow()
   * @generated
   * @ordered
   */
  protected Workflow assembledWorkflow;

  /**
   * The default value of the '{@link #getStrategy() <em>Strategy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStrategy()
   * @generated
   * @ordered
   */
  protected static final String STRATEGY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStrategy() <em>Strategy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStrategy()
   * @generated
   * @ordered
   */
  protected String strategy = STRATEGY_EDEFAULT;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<Param> params;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getTaskConfigurations() <em>Task Configurations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskConfigurations()
   * @generated
   * @ordered
   */
  protected EList<ExperimentTaskConfiguraiton> taskConfigurations;

  /**
   * The default value of the '{@link #getNotImplemented() <em>Not Implemented</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotImplemented()
   * @generated
   * @ordered
   */
  protected static final String NOT_IMPLEMENTED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNotImplemented() <em>Not Implemented</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotImplemented()
   * @generated
   * @ordered
   */
  protected String notImplemented = NOT_IMPLEMENTED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpaceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.SPACE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workflow getAssembledWorkflow()
  {
    if (assembledWorkflow != null && assembledWorkflow.eIsProxy())
    {
      InternalEObject oldAssembledWorkflow = (InternalEObject)assembledWorkflow;
      assembledWorkflow = (Workflow)eResolveProxy(oldAssembledWorkflow);
      if (assembledWorkflow != oldAssembledWorkflow)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.SPACE__ASSEMBLED_WORKFLOW, oldAssembledWorkflow, assembledWorkflow));
      }
    }
    return assembledWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Workflow basicGetAssembledWorkflow()
  {
    return assembledWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssembledWorkflow(Workflow newAssembledWorkflow)
  {
    Workflow oldAssembledWorkflow = assembledWorkflow;
    assembledWorkflow = newAssembledWorkflow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.SPACE__ASSEMBLED_WORKFLOW, oldAssembledWorkflow, assembledWorkflow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStrategy()
  {
    return strategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStrategy(String newStrategy)
  {
    String oldStrategy = strategy;
    strategy = newStrategy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.SPACE__STRATEGY, oldStrategy, strategy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Param> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<Param>(Param.class, this, XDSLPackage.SPACE__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, XDSLPackage.SPACE__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExperimentTaskConfiguraiton> getTaskConfigurations()
  {
    if (taskConfigurations == null)
    {
      taskConfigurations = new EObjectContainmentEList<ExperimentTaskConfiguraiton>(ExperimentTaskConfiguraiton.class, this, XDSLPackage.SPACE__TASK_CONFIGURATIONS);
    }
    return taskConfigurations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNotImplemented()
  {
    return notImplemented;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNotImplemented(String newNotImplemented)
  {
    String oldNotImplemented = notImplemented;
    notImplemented = newNotImplemented;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.SPACE__NOT_IMPLEMENTED, oldNotImplemented, notImplemented));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDSLPackage.SPACE__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case XDSLPackage.SPACE__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case XDSLPackage.SPACE__TASK_CONFIGURATIONS:
        return ((InternalEList<?>)getTaskConfigurations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.SPACE__ASSEMBLED_WORKFLOW:
        if (resolve) return getAssembledWorkflow();
        return basicGetAssembledWorkflow();
      case XDSLPackage.SPACE__STRATEGY:
        return getStrategy();
      case XDSLPackage.SPACE__PARAMS:
        return getParams();
      case XDSLPackage.SPACE__ATTRIBUTES:
        return getAttributes();
      case XDSLPackage.SPACE__TASK_CONFIGURATIONS:
        return getTaskConfigurations();
      case XDSLPackage.SPACE__NOT_IMPLEMENTED:
        return getNotImplemented();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.SPACE__ASSEMBLED_WORKFLOW:
        setAssembledWorkflow((Workflow)newValue);
        return;
      case XDSLPackage.SPACE__STRATEGY:
        setStrategy((String)newValue);
        return;
      case XDSLPackage.SPACE__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends Param>)newValue);
        return;
      case XDSLPackage.SPACE__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case XDSLPackage.SPACE__TASK_CONFIGURATIONS:
        getTaskConfigurations().clear();
        getTaskConfigurations().addAll((Collection<? extends ExperimentTaskConfiguraiton>)newValue);
        return;
      case XDSLPackage.SPACE__NOT_IMPLEMENTED:
        setNotImplemented((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.SPACE__ASSEMBLED_WORKFLOW:
        setAssembledWorkflow((Workflow)null);
        return;
      case XDSLPackage.SPACE__STRATEGY:
        setStrategy(STRATEGY_EDEFAULT);
        return;
      case XDSLPackage.SPACE__PARAMS:
        getParams().clear();
        return;
      case XDSLPackage.SPACE__ATTRIBUTES:
        getAttributes().clear();
        return;
      case XDSLPackage.SPACE__TASK_CONFIGURATIONS:
        getTaskConfigurations().clear();
        return;
      case XDSLPackage.SPACE__NOT_IMPLEMENTED:
        setNotImplemented(NOT_IMPLEMENTED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.SPACE__ASSEMBLED_WORKFLOW:
        return assembledWorkflow != null;
      case XDSLPackage.SPACE__STRATEGY:
        return STRATEGY_EDEFAULT == null ? strategy != null : !STRATEGY_EDEFAULT.equals(strategy);
      case XDSLPackage.SPACE__PARAMS:
        return params != null && !params.isEmpty();
      case XDSLPackage.SPACE__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case XDSLPackage.SPACE__TASK_CONFIGURATIONS:
        return taskConfigurations != null && !taskConfigurations.isEmpty();
      case XDSLPackage.SPACE__NOT_IMPLEMENTED:
        return NOT_IMPLEMENTED_EDEFAULT == null ? notImplemented != null : !NOT_IMPLEMENTED_EDEFAULT.equals(notImplemented);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (strategy: ");
    result.append(strategy);
    result.append(", notImplemented: ");
    result.append(notImplemented);
    result.append(')');
    return result.toString();
  }

} //SpaceImpl
