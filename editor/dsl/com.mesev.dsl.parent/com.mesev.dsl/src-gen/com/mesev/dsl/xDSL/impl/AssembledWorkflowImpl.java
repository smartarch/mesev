/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package com.mesev.dsl.xDSL.impl;

import com.mesev.dsl.xDSL.AssembledWorkflow;
import com.mesev.dsl.xDSL.TaskConfiguration;
import com.mesev.dsl.xDSL.Workflow;
import com.mesev.dsl.xDSL.XDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assembled Workflow</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mesev.dsl.xDSL.impl.AssembledWorkflowImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.AssembledWorkflowImpl#getTaskConfigurations <em>Task Configurations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssembledWorkflowImpl extends WorkflowImpl implements AssembledWorkflow
{
  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected Workflow parent;

  /**
   * The cached value of the '{@link #getTaskConfigurations() <em>Task Configurations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskConfigurations()
   * @generated
   * @ordered
   */
  protected EList<TaskConfiguration> taskConfigurations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssembledWorkflowImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.ASSEMBLED_WORKFLOW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Workflow getParent()
  {
    if (parent != null && parent.eIsProxy())
    {
      InternalEObject oldParent = (InternalEObject)parent;
      parent = (Workflow)eResolveProxy(oldParent);
      if (parent != oldParent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.ASSEMBLED_WORKFLOW__PARENT, oldParent, parent));
      }
    }
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Workflow basicGetParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParent(Workflow newParent)
  {
    Workflow oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.ASSEMBLED_WORKFLOW__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TaskConfiguration> getTaskConfigurations()
  {
    if (taskConfigurations == null)
    {
      taskConfigurations = new EObjectContainmentEList<TaskConfiguration>(TaskConfiguration.class, this, XDSLPackage.ASSEMBLED_WORKFLOW__TASK_CONFIGURATIONS);
    }
    return taskConfigurations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDSLPackage.ASSEMBLED_WORKFLOW__TASK_CONFIGURATIONS:
        return ((InternalEList<?>)getTaskConfigurations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.ASSEMBLED_WORKFLOW__PARENT:
        if (resolve) return getParent();
        return basicGetParent();
      case XDSLPackage.ASSEMBLED_WORKFLOW__TASK_CONFIGURATIONS:
        return getTaskConfigurations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.ASSEMBLED_WORKFLOW__PARENT:
        setParent((Workflow)newValue);
        return;
      case XDSLPackage.ASSEMBLED_WORKFLOW__TASK_CONFIGURATIONS:
        getTaskConfigurations().clear();
        getTaskConfigurations().addAll((Collection<? extends TaskConfiguration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.ASSEMBLED_WORKFLOW__PARENT:
        setParent((Workflow)null);
        return;
      case XDSLPackage.ASSEMBLED_WORKFLOW__TASK_CONFIGURATIONS:
        getTaskConfigurations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.ASSEMBLED_WORKFLOW__PARENT:
        return parent != null;
      case XDSLPackage.ASSEMBLED_WORKFLOW__TASK_CONFIGURATIONS:
        return taskConfigurations != null && !taskConfigurations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AssembledWorkflowImpl
