/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package com.mesev.dsl.xDSL.impl;

import com.mesev.dsl.xDSL.ExperimentTask;
import com.mesev.dsl.xDSL.TaskConfigurationBody;
import com.mesev.dsl.xDSL.XDSLPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Experiment Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mesev.dsl.xDSL.impl.ExperimentTaskImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.ExperimentTaskImpl#isConfigured <em>Configured</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.ExperimentTaskImpl#getTaskConfiguration <em>Task Configuration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExperimentTaskImpl extends ExperimentNodeImpl implements ExperimentTask
{
  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #isConfigured() <em>Configured</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConfigured()
   * @generated
   * @ordered
   */
  protected static final boolean CONFIGURED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isConfigured() <em>Configured</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConfigured()
   * @generated
   * @ordered
   */
  protected boolean configured = CONFIGURED_EDEFAULT;

  /**
   * The cached value of the '{@link #getTaskConfiguration() <em>Task Configuration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskConfiguration()
   * @generated
   * @ordered
   */
  protected TaskConfigurationBody taskConfiguration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExperimentTaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.EXPERIMENT_TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isConfigured()
  {
    return configured;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfigured(boolean newConfigured)
  {
    boolean oldConfigured = configured;
    configured = newConfigured;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK__CONFIGURED, oldConfigured, configured));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskConfigurationBody getTaskConfiguration()
  {
    return taskConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTaskConfiguration(TaskConfigurationBody newTaskConfiguration, NotificationChain msgs)
  {
    TaskConfigurationBody oldTaskConfiguration = taskConfiguration;
    taskConfiguration = newTaskConfiguration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION, oldTaskConfiguration, newTaskConfiguration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaskConfiguration(TaskConfigurationBody newTaskConfiguration)
  {
    if (newTaskConfiguration != taskConfiguration)
    {
      NotificationChain msgs = null;
      if (taskConfiguration != null)
        msgs = ((InternalEObject)taskConfiguration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION, null, msgs);
      if (newTaskConfiguration != null)
        msgs = ((InternalEObject)newTaskConfiguration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION, null, msgs);
      msgs = basicSetTaskConfiguration(newTaskConfiguration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION, newTaskConfiguration, newTaskConfiguration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION:
        return basicSetTaskConfiguration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK__ABSTRACT:
        return isAbstract();
      case XDSLPackage.EXPERIMENT_TASK__CONFIGURED:
        return isConfigured();
      case XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION:
        return getTaskConfiguration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case XDSLPackage.EXPERIMENT_TASK__CONFIGURED:
        setConfigured((Boolean)newValue);
        return;
      case XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION:
        setTaskConfiguration((TaskConfigurationBody)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case XDSLPackage.EXPERIMENT_TASK__CONFIGURED:
        setConfigured(CONFIGURED_EDEFAULT);
        return;
      case XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION:
        setTaskConfiguration((TaskConfigurationBody)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case XDSLPackage.EXPERIMENT_TASK__CONFIGURED:
        return configured != CONFIGURED_EDEFAULT;
      case XDSLPackage.EXPERIMENT_TASK__TASK_CONFIGURATION:
        return taskConfiguration != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(", configured: ");
    result.append(configured);
    result.append(')');
    return result.toString();
  }

} //ExperimentTaskImpl
