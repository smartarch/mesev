/**
 * generated by Xtext 2.39.0-SNAPSHOT
 */
package com.mesev.dsl.xDSL.impl;

import com.mesev.dsl.xDSL.ExperimentTaskConfiguraiton;
import com.mesev.dsl.xDSL.ExperimentTaskConfiguraitonBody;
import com.mesev.dsl.xDSL.Task;
import com.mesev.dsl.xDSL.XDSLPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Experiment Task Configuraiton</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mesev.dsl.xDSL.impl.ExperimentTaskConfiguraitonImpl#getTask <em>Task</em>}</li>
 *   <li>{@link com.mesev.dsl.xDSL.impl.ExperimentTaskConfiguraitonImpl#getTaskConfiguration <em>Task Configuration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExperimentTaskConfiguraitonImpl extends MinimalEObjectImpl.Container implements ExperimentTaskConfiguraiton
{
  /**
   * The cached value of the '{@link #getTask() <em>Task</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTask()
   * @generated
   * @ordered
   */
  protected Task task;

  /**
   * The cached value of the '{@link #getTaskConfiguration() <em>Task Configuration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskConfiguration()
   * @generated
   * @ordered
   */
  protected ExperimentTaskConfiguraitonBody taskConfiguration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExperimentTaskConfiguraitonImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDSLPackage.Literals.EXPERIMENT_TASK_CONFIGURAITON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Task getTask()
  {
    if (task != null && task.eIsProxy())
    {
      InternalEObject oldTask = (InternalEObject)task;
      task = (Task)eResolveProxy(oldTask);
      if (task != oldTask)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK, oldTask, task));
      }
    }
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Task basicGetTask()
  {
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTask(Task newTask)
  {
    Task oldTask = task;
    task = newTask;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK, oldTask, task));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExperimentTaskConfiguraitonBody getTaskConfiguration()
  {
    return taskConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTaskConfiguration(ExperimentTaskConfiguraitonBody newTaskConfiguration, NotificationChain msgs)
  {
    ExperimentTaskConfiguraitonBody oldTaskConfiguration = taskConfiguration;
    taskConfiguration = newTaskConfiguration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION, oldTaskConfiguration, newTaskConfiguration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTaskConfiguration(ExperimentTaskConfiguraitonBody newTaskConfiguration)
  {
    if (newTaskConfiguration != taskConfiguration)
    {
      NotificationChain msgs = null;
      if (taskConfiguration != null)
        msgs = ((InternalEObject)taskConfiguration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION, null, msgs);
      if (newTaskConfiguration != null)
        msgs = ((InternalEObject)newTaskConfiguration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION, null, msgs);
      msgs = basicSetTaskConfiguration(newTaskConfiguration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION, newTaskConfiguration, newTaskConfiguration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION:
        return basicSetTaskConfiguration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK:
        if (resolve) return getTask();
        return basicGetTask();
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION:
        return getTaskConfiguration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK:
        setTask((Task)newValue);
        return;
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION:
        setTaskConfiguration((ExperimentTaskConfiguraitonBody)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK:
        setTask((Task)null);
        return;
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION:
        setTaskConfiguration((ExperimentTaskConfiguraitonBody)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK:
        return task != null;
      case XDSLPackage.EXPERIMENT_TASK_CONFIGURAITON__TASK_CONFIGURATION:
        return taskConfiguration != null;
    }
    return super.eIsSet(featureID);
  }

} //ExperimentTaskConfiguraitonImpl
