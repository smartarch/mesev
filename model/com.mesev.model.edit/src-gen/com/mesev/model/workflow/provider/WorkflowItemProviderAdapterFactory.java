/**
 */
package com.mesev.model.workflow.provider;

import com.mesev.model.workflow.util.WorkflowAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowItemProviderAdapterFactory extends WorkflowAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WorkflowItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.InputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputDataItemProvider inputDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.InputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputDataAdapter() {
		if (inputDataItemProvider == null) {
			inputDataItemProvider = new InputDataItemProvider(this);
		}

		return inputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.OutputData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDataItemProvider outputDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.OutputData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDataAdapter() {
		if (outputDataItemProvider == null) {
			outputDataItemProvider = new OutputDataItemProvider(this);
		}

		return outputDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Metric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricItemProvider metricItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Metric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricAdapter() {
		if (metricItemProvider == null) {
			metricItemProvider = new MetricItemProvider(this);
		}

		return metricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Array} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Array}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ArrayItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Structure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureItemProvider structureItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Structure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureAdapter() {
		if (structureItemProvider == null) {
			structureItemProvider = new StructureItemProvider(this);
		}

		return structureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ConditionalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalLinkItemProvider conditionalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ConditionalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalLinkAdapter() {
		if (conditionalLinkItemProvider == null) {
			conditionalLinkItemProvider = new ConditionalLinkItemProvider(this);
		}

		return conditionalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.RegularLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularLinkItemProvider regularLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.RegularLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularLinkAdapter() {
		if (regularLinkItemProvider == null) {
			regularLinkItemProvider = new RegularLinkItemProvider(this);
		}

		return regularLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ExceptionalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionalLinkItemProvider exceptionalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ExceptionalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionalLinkAdapter() {
		if (exceptionalLinkItemProvider == null) {
			exceptionalLinkItemProvider = new ExceptionalLinkItemProvider(this);
		}

		return exceptionalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.MetaData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaDataItemProvider metaDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.MetaData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaDataAdapter() {
		if (metaDataItemProvider == null) {
			metaDataItemProvider = new MetaDataItemProvider(this);
		}

		return metaDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Parallel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelItemProvider parallelItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Parallel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelAdapter() {
		if (parallelItemProvider == null) {
			parallelItemProvider = new ParallelItemProvider(this);
		}

		return parallelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Exclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusiveItemProvider exclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Exclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusiveAdapter() {
		if (exclusiveItemProvider == null) {
			exclusiveItemProvider = new ExclusiveItemProvider(this);
		}

		return exclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Inclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InclusiveItemProvider inclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Inclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInclusiveAdapter() {
		if (inclusiveItemProvider == null) {
			inclusiveItemProvider = new InclusiveItemProvider(this);
		}

		return inclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Join} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinItemProvider joinItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Join}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinAdapter() {
		if (joinItemProvider == null) {
			joinItemProvider = new JoinItemProvider(this);
		}

		return joinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveTypeAdapter() {
		if (primitiveTypeItemProvider == null) {
			primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
		}

		return primitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ROOT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROOTItemProvider rootItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ROOT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROOTAdapter() {
		if (rootItemProvider == null) {
			rootItemProvider = new ROOTItemProvider(this);
		}

		return rootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Experiment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperimentItemProvider experimentItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Experiment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperimentAdapter() {
		if (experimentItemProvider == null) {
			experimentItemProvider = new ExperimentItemProvider(this);
		}

		return experimentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Case} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseItemProvider caseItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Case}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseAdapter() {
		if (caseItemProvider == null) {
			caseItemProvider = new CaseItemProvider(this);
		}

		return caseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.AssembledWorflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssembledWorflowItemProvider assembledWorflowItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.AssembledWorflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssembledWorflowAdapter() {
		if (assembledWorflowItemProvider == null) {
			assembledWorflowItemProvider = new AssembledWorflowItemProvider(this);
		}

		return assembledWorflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.SubstitutedTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstitutedTaskItemProvider substitutedTaskItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.SubstitutedTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstitutedTaskAdapter() {
		if (substitutedTaskItemProvider == null) {
			substitutedTaskItemProvider = new SubstitutedTaskItemProvider(this);
		}

		return substitutedTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.CompositeWorkflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeWorkflowItemProvider compositeWorkflowItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.CompositeWorkflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeWorkflowAdapter() {
		if (compositeWorkflowItemProvider == null) {
			compositeWorkflowItemProvider = new CompositeWorkflowItemProvider(this);
		}

		return compositeWorkflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.TaskSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskSpecificationItemProvider taskSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.TaskSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskSpecificationAdapter() {
		if (taskSpecificationItemProvider == null) {
			taskSpecificationItemProvider = new TaskSpecificationItemProvider(this);
		}

		return taskSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Control} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlItemProvider controlItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Control}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlAdapter() {
		if (controlItemProvider == null) {
			controlItemProvider = new ControlItemProvider(this);
		}

		return controlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterValueItemProvider parameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterValueAdapter() {
		if (parameterValueItemProvider == null) {
			parameterValueItemProvider = new ParameterValueItemProvider(this);
		}

		return parameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.TaskConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskConfigurationItemProvider taskConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.TaskConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskConfigurationAdapter() {
		if (taskConfigurationItemProvider == null) {
			taskConfigurationItemProvider = new TaskConfigurationItemProvider(this);
		}

		return taskConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ControlNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeItemProvider controlNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ControlNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeAdapter() {
		if (controlNodeItemProvider == null) {
			controlNodeItemProvider = new ControlNodeItemProvider(this);
		}

		return controlNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.DataLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataLinkItemProvider dataLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.DataLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataLinkAdapter() {
		if (dataLinkItemProvider == null) {
			dataLinkItemProvider = new DataLinkItemProvider(this);
		}

		return dataLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.TaskData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskDataItemProvider taskDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.TaskData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskDataAdapter() {
		if (taskDataItemProvider == null) {
			taskDataItemProvider = new TaskDataItemProvider(this);
		}

		return taskDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ValueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueConstraintItemProvider valueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ValueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueConstraintAdapter() {
		if (valueConstraintItemProvider == null) {
			valueConstraintItemProvider = new ValueConstraintItemProvider(this);
		}

		return valueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.Interaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionItemProvider interactionItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.Interaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionAdapter() {
		if (interactionItemProvider == null) {
			interactionItemProvider = new InteractionItemProvider(this);
		}

		return interactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ExperimentSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperimentSpaceItemProvider experimentSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ExperimentSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperimentSpaceAdapter() {
		if (experimentSpaceItemProvider == null) {
			experimentSpaceItemProvider = new ExperimentSpaceItemProvider(this);
		}

		return experimentSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ExperimentTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperimentTaskItemProvider experimentTaskItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ExperimentTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperimentTaskAdapter() {
		if (experimentTaskItemProvider == null) {
			experimentTaskItemProvider = new ExperimentTaskItemProvider(this);
		}

		return experimentTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.RegularControlLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularControlLinkItemProvider regularControlLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.RegularControlLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegularControlLinkAdapter() {
		if (regularControlLinkItemProvider == null) {
			regularControlLinkItemProvider = new RegularControlLinkItemProvider(this);
		}

		return regularControlLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mesev.model.workflow.ConditionalControlLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalControlLinkItemProvider conditionalControlLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.mesev.model.workflow.ConditionalControlLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalControlLinkAdapter() {
		if (conditionalControlLinkItemProvider == null) {
			conditionalControlLinkItemProvider = new ConditionalControlLinkItemProvider(this);
		}

		return conditionalControlLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (inputDataItemProvider != null)
			inputDataItemProvider.dispose();
		if (outputDataItemProvider != null)
			outputDataItemProvider.dispose();
		if (metricItemProvider != null)
			metricItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (arrayItemProvider != null)
			arrayItemProvider.dispose();
		if (structureItemProvider != null)
			structureItemProvider.dispose();
		if (fieldItemProvider != null)
			fieldItemProvider.dispose();
		if (taskItemProvider != null)
			taskItemProvider.dispose();
		if (conditionalLinkItemProvider != null)
			conditionalLinkItemProvider.dispose();
		if (regularLinkItemProvider != null)
			regularLinkItemProvider.dispose();
		if (exceptionalLinkItemProvider != null)
			exceptionalLinkItemProvider.dispose();
		if (groupItemProvider != null)
			groupItemProvider.dispose();
		if (metaDataItemProvider != null)
			metaDataItemProvider.dispose();
		if (parallelItemProvider != null)
			parallelItemProvider.dispose();
		if (exclusiveItemProvider != null)
			exclusiveItemProvider.dispose();
		if (inclusiveItemProvider != null)
			inclusiveItemProvider.dispose();
		if (joinItemProvider != null)
			joinItemProvider.dispose();
		if (eventItemProvider != null)
			eventItemProvider.dispose();
		if (primitiveTypeItemProvider != null)
			primitiveTypeItemProvider.dispose();
		if (rootItemProvider != null)
			rootItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (experimentItemProvider != null)
			experimentItemProvider.dispose();
		if (caseItemProvider != null)
			caseItemProvider.dispose();
		if (assembledWorflowItemProvider != null)
			assembledWorflowItemProvider.dispose();
		if (substitutedTaskItemProvider != null)
			substitutedTaskItemProvider.dispose();
		if (compositeWorkflowItemProvider != null)
			compositeWorkflowItemProvider.dispose();
		if (taskSpecificationItemProvider != null)
			taskSpecificationItemProvider.dispose();
		if (controlItemProvider != null)
			controlItemProvider.dispose();
		if (parameterValueItemProvider != null)
			parameterValueItemProvider.dispose();
		if (taskConfigurationItemProvider != null)
			taskConfigurationItemProvider.dispose();
		if (controlNodeItemProvider != null)
			controlNodeItemProvider.dispose();
		if (dataLinkItemProvider != null)
			dataLinkItemProvider.dispose();
		if (taskDataItemProvider != null)
			taskDataItemProvider.dispose();
		if (valueConstraintItemProvider != null)
			valueConstraintItemProvider.dispose();
		if (interactionItemProvider != null)
			interactionItemProvider.dispose();
		if (experimentSpaceItemProvider != null)
			experimentSpaceItemProvider.dispose();
		if (experimentTaskItemProvider != null)
			experimentTaskItemProvider.dispose();
		if (regularControlLinkItemProvider != null)
			regularControlLinkItemProvider.dispose();
		if (conditionalControlLinkItemProvider != null)
			conditionalControlLinkItemProvider.dispose();
	}

}
